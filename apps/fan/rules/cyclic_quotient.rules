object CyclicQuotient {
   
   property CLASS_GROUP : Matrix;

   rule CLASS_GROUP : N, Q{
      my $n = $this->N;
      my $q = $this->Q;
      my $P = new Polytope(POINTS=>[[1,0,0],[1,$q-$n,-1],[1,-$n,0],[1,$q-2*$n,-1]]);
      my $class_group = $P->LATTICE_POINTS;
      $class_group = new Matrix<Rational>($class_group->minor(All,~[0]));
      my @class_group = grep($_->[1] != -1,@$class_group);
      my @class_group = grep(($_->[0] + ($q-$n)*$_->[1]) != -$n, @class_group);
      $this->CLASS_GROUP = new Matrix<Rational>(@class_group);
   }


   declare object Ext;

   object Ext {

      property LABELS : String;
      
      property GRAPH : Graph<Directed>;
      
      property ADJACENCY : Map<Vector,Array<Vector>>;

      property VERTEX_MAP : Map<Vector,Array<Vector>>;

      property GEN_MAP : Map<Vector,Matrix>;

   }

   property EXT : Ext;

   rule EXT.GRAPH.ADJACENCY, EXT.GRAPH.NODE_LABELS : EXT.ADJACENCY, CLASS_GROUP {
      my $G = $this->CLASS_GROUP;
      my $numbers = new Map<Vector, Int>();
      my $graph = new common::Graph<Directed>($G->rows);
      my $k = 0;
      foreach my $g (@$G){
         $numbers->{$g} = $k;
         $k++;
      }
      foreach my $g (@$G){
         foreach my $n (@{$this->EXT->ADJACENCY->{$g}}){
            $graph->edge($numbers->{$g},$numbers->{$n});
         }
      }
      $this->EXT->GRAPH->NODE_LABELS = @$G;
      $this->EXT->GRAPH->ADJACENCY = $graph;
   }

   rule EXT.ADJACENCY, EXT.VERTEX_MAP, EXT.GEN_MAP : CLASS_GROUP, N, Q {
      my $n = $this->N;
      my $q = $this->Q;
      my $c = new Cone(INPUT_RAYS=>[[0,1],[$n,$q]]);
      my $vmap = new Map<Vector,Array<Vector>>();
      my $egraph = new Map<Vector,Array<Vector>>();
      my $gmap = new Map<Vector,Matrix>();
      # We construct a hash associating to a divisor
      # the vertex of its section polytope.
      my $vertex_hash = new Map<Vector,Vector>();
      my $labels = "";
      foreach my $div (@{$this->CLASS_GROUP}){
         my $D = new Polytope(INEQUALITIES=>$div|$c->FACETS);
         my $vertex = $D->VERTICES->[0]->slice(1);
         $vertex_hash->{$div} = $vertex;
      }
  
      foreach my $div (@{$this->CLASS_GROUP}){
         my $D = new Polytope(INEQUALITIES=>$div|$c->FACETS);
         my @associated = ();
         my $genD = lower_lattice_points($D);
         $genD = $genD->minor(All,~[0]);
         
         my @sorted = ();
         for(my $i =0; $i<200; $i++){
            foreach my $g (@$genD){
               if($g->[0]==$i){
                  push @sorted,$g;
               }
            }
         }
         $genD = new Matrix<Rational>(@sorted);
         $gmap->{$div} = $genD;

         # Calculating intersection polytopes:
         my @ips = map((new Polytope(POINTS=>(ones_vector(1)|$_)/(zero_vector(2)|$c->RAYS))),@$genD);
         my $n = @ips;
         @ips = map(intersection($ips[$_],$ips[$_+1]),0..($n-2));
         @ips = map(($_->VERTICES->[0]->slice(1)),@ips);
         
         # Setting the vertex map:
         $vmap->{$div} = new Array<Vector>(map(-$_,@ips));
         
         foreach my $t (@ips){
            foreach my $v (@{$this->CLASS_GROUP}){
               if(is_integral($t-$vertex_hash->{$v})){
                  push @associated, new Vector($v);
                  $labels .= $div;
                  $labels .= " < shift: ";
                  $labels .= $t-$vertex_hash->{$v};
                  $labels .= " < ";
                  $labels .= $v;
                  $labels .= "\n";
                  last;
               }
            }
         }
         
         # Setting the graph:
         $egraph->{$div} = new Array<Vector>(@associated);
      }
      print $labels;
      # Assigning to global:
      $this->EXT->VERTEX_MAP = $vmap;
      $this->EXT->ADJACENCY = $egraph;
      $this->EXT->GEN_MAP = $gmap;
   }

   user_method new_graph(){
      my $cq = $_[0];
      my $n = $cq->N;
      my $q = $cq->Q;
      for(my $i = 1; $i<$n; $i++){
         my $gc = new Cone(INPUT_RAYS=>[[$n,$i*$n,$i*$q],[0,$n,$q],[0,0,1]]);
         my $genD = new Matrix(grep($_->[0]==1, @{$gc->HILBERT_BASIS}));
         $genD = $genD->minor(All,~[0]);
         
         my @sorted = ();
         for(my $i =0; $i<200; $i++){
            foreach my $g (@$genD){
               if($g->[0]==$i){
                  push @sorted,$g;
               }
            }
         }
         $genD = new Matrix<Rational>(@sorted);
        
         print $genD;

         for(my $j=1; $j<$genD->rows; $j++){
            my $source = $genD->[$j]->[0]-$genD->[$j-1]->[0];
            my $shift = $genD->[$j-1];
            print $source," > shift: [",$shift,"] > ",$i,"\n";
         }
      
      }
   }

   user_method print_ext_nicely(){
      my $cq = $_[0];
      foreach my $div (@{$cq->CLASS_GROUP}){
         print "The divisor ",$div," is associated with:\n";
         foreach my $a ($cq->EXT->ADJACENCY->{$div}){
            print $a,"\n";
         }
         print ".\n";
      }
   }

   user_method compute_ext_matrix(){
      my $cq = $_[0];
      my @result = ();
      foreach my $d (@{$cq->CLASS_GROUP}){
         push @result, $cq->compute_ext_matrix_local(new Vector<Rational>($d));
      }
      return new Matrix(@result);
   }

   user_method compute_ext_matrix_local(Vector){
      
      my $cq = $_[0];
      my $d = $_[1];
      my $n = $cq->N;
      my $q = $cq->Q;
      my $c = new Cone(INPUT_RAYS=>[[0,1],[$n,$q]]);
      my $H = $c->HILBERT_BASIS;
      my @result = ();

      load_singular_library("homolog.lib");
      load_singular_library("toric.lib");
      my $singular = "ring R = 0,(x(0..".($H->rows-1).")),dp;\n";
      $singular .= "intmat m[".$H->rows."][".$H->cols."] = ";
      $singular .= join(",",map(join(",",@$_),@$H)).";\n";
      $singular .= "m = transpose(m);\n";
      $singular .= "ideal ti = toric_ideal(m,\"pt\");\n";
      $singular .= "qring q = std(ti);\n";
      # singular_eval($singular);

      my $j = new Polytope(INEQUALITIES=>$d|$c->FACETS); 
      my $jvertex = $j->VERTICES->[0]->slice(1); 
      my $genj = lower_lattice_points($j);
      $genj = $genj->minor(All,~[0]);
      $singular = "ideal j = ";
      if($genj->rows == 1){
            $singular .= "1;\n";
         } else {
            foreach my $v (@$genj){
               $singular .= "1";
               my $g = find_positive_combination($v,$H,$c->FACETS);
               for(my $i=0; $i<$g->dim;$i++){
                  if($g->[$i]>0){
                     $singular .= "*x(".$i.")^".$g->[$i];
                  }
               }
               $singular .= ",";
            }
            $singular .= "0;\n";
         }
      $singular .= "j = std(j);\n";
      # singular_eval($singular);

      foreach my $div (@{$cq->CLASS_GROUP}){
         my $geni = $cq->EXT->GEN_MAP->{$div};
         my $lower_ann = new Polytope(POINTS=>(ones_vector(1)|$jvertex-$geni->[0])/(zero_vector(2)|$c->RAYS)); 
         my $upper_ann = new Polytope(POINTS=>(ones_vector(1)|$jvertex-$geni->[$geni->rows-1])/(zero_vector(2)|$c->RAYS)); 
         my $ann = intersection($lower_ann,$upper_ann); 
         my $nann_vertex = $ann->VERTICES->[0]->slice(1); 
         # Complement of the annihilating polytopes: 
         my $nann = new Polytope(POINTS=>(ones_vector(1)|$nann_vertex)/(zero_vector(2)|-$c->RAYS)); 
 
         # Creating the intersection polytopes: 
         my @ips = @{$cq->EXT->VERTEX_MAP->{$div}}; 
         @ips = map((new Polytope(POINTS=>(ones_vector(1)|$_+$jvertex)/(zero_vector(2)|$c->RAYS))),@ips); 
         @ips = map(intersection($nann,$_),@ips); 
         my @unique = (); 
         foreach my $pp (@ips){ 
            my $mat = $pp->LATTICE_POINTS; 
            foreach my $v (@$mat){ 
               my $id = grep($_ == $v, @unique); 
               if($id == 0){ 
                  push @unique, $v; 
               } 
            } 
         } 
   
         # Eliminating relations that are on the boundary of the annihilator: 
         my @below = (); 
         foreach my $g (@unique){ 
            my $a = polytope_contains_point($lower_ann,new Vector<Rational>($g)); 
            my $b = polytope_contains_point($upper_ann,new Vector<Rational>($g)); 
            if (!$a && !$b){ 
               push @below,$g; 
            } 
         } 
         my $u = new Matrix(@below);
         # Translating generators for Singular: 
         # print $div," has Ext1(.,D)-dimension ",$u->rows,"\n"; 
         push @result, $u->rows;

         $singular = "ideal i = "; 
         if($geni->rows == 1){ 
               $singular .= "1;\n"; 
            } else { 
               foreach my $v (@$geni){ 
                  $singular .= "1"; 
                  my $g = find_positive_combination($v,$H,$c->FACETS); 
                  for(my $i=0; $i<$g->dim;$i++){ 
                     if($g->[$i]>0){ 
                        $singular .= "*x(".$i.")^".$g->[$i]; 
                     } 
                  } 
                  $singular .= ","; 
               } 
               $singular .= "0;\n"; 
            } 
         $singular .= "i = std(i);\n";
         $singular .= "module L = Ext(1,syz(i),syz(j));\n";
         $singular .= "int a = vdim(L);\n";
         # print "The singular result:\n";
         # singular_eval($singular);      
         # my $a = singular_get_int("a");
         # if($a == -1){
         #    $a = 0;
         # }
         # my $check = $a == $u->rows;
         # print "Check: ",$check,"\n";
         # if(!$check){
         #    print $a," ",$u->rows,"\n";
         # }
      }
      return new Vector(@result);
   }

   user_method compute_all_ext1_ws(Vector){
      my $cq = $_[0];
      my $d = $_[1];
      my $n = $cq->N;
      my $q = $cq->Q;
      my $c = new Cone(INPUT_RAYS=>[[0,1],[$n,$q]]);
      my $H = $c->HILBERT_BASIS;

      my $singular = "LIB \"homolog.lib\";\n";
      $singular .= "LIB \"toric.lib\";\n";
      $singular .= "ring R = 0,(x(0..".($H->rows-1).")),dp;\n";
      $singular .= "intmat m[".$H->rows."][".$H->cols."] = ";
      $singular .= join(",",map(join(",",@$_),@$H)).";\n";
      $singular .= "m = transpose(m);\n";
      $singular .= "ideal ti = toric_ideal(m,\"pt\");\n";
      $singular .= "qring q = std(ti);\n";
      
      my $j = new Polytope(INEQUALITIES=>$d|$c->FACETS); 
      my $jvertex = $j->VERTICES->[0]->slice(1); 
      my $genj = lower_lattice_points($j);
      $genj = $genj->minor(All,~[0]);
      $singular .= "ideal j = ";
      if($genj->rows == 1){
            $singular .= "1;\n";
         } else {
            foreach my $v (@$genj){
               $singular .= "1";
               my $g = find_positive_combination($v,$H,$c->FACETS);
               for(my $i=0; $i<$g->dim;$i++){
                  if($g->[$i]>0){
                     $singular .= "*x(".$i.")^".$g->[$i];
                  }
               }
               $singular .= ",";
            }
            $singular .= "0;\n";
         }
      $singular .= "j = std(j);\n";
      
      foreach my $div (@{$cq->CLASS_GROUP}){
         print "----------------------------------\n\n";
         my $geni = $cq->EXT->GEN_MAP->{$div};
         my $lower_ann = new Polytope(POINTS=>(ones_vector(1)|$jvertex-$geni->[0])/(zero_vector(2)|$c->RAYS)); 
         my $upper_ann = new Polytope(POINTS=>(ones_vector(1)|$jvertex-$geni->[$geni->rows-1])/(zero_vector(2)|$c->RAYS)); 
         my $ann = intersection($lower_ann,$upper_ann); 
         my $nann_vertex = $ann->VERTICES->[0]->slice(1); 
         # Complement of the annihilating polytopes: 
         my $nann = new Polytope(POINTS=>(ones_vector(1)|$nann_vertex)/(zero_vector(2)|-$c->RAYS)); 
 
         # Creating the intersection polytopes: 
         my @ips = @{$cq->EXT->VERTEX_MAP->{$div}}; 
         @ips = map((new Polytope(POINTS=>(ones_vector(1)|$_+$jvertex)/(zero_vector(2)|$c->RAYS))),@ips); 
         @ips = map(intersection($nann,$_),@ips); 
         my @unique = (); 
         foreach my $pp (@ips){ 
            my $mat = $pp->LATTICE_POINTS; 
            foreach my $v (@$mat){ 
               my $id = grep($_ == $v, @unique); 
               if($id == 0){ 
                  push @unique, $v; 
               } 
            } 
         } 
   
         # Eliminating relations that are on the boundary of the annihilator: 
         my @below = (); 
         foreach my $g (@unique){ 
            my $a = polytope_contains_point($lower_ann,new Vector<Rational>($g)); 
            my $b = polytope_contains_point($upper_ann,new Vector<Rational>($g)); 
            if (!$a && !$b){ 
               push @below,$g; 
            } 
         } 
         my $u = new Matrix(@below);
         print "\nThe degrees of this Ext1 are:\n",$u;
         # Translating generators for Singular: 
         print $div," has Ext1(.,D)-dimension ",$u->rows,"\n"; 
       
         $singular .= "ideal i = "; 
         if($geni->rows == 1){ 
               $singular .= "1;\n"; 
            } else { 
               foreach my $v (@$geni){ 
                  $singular .= "1"; 
                  my $g = find_positive_combination($v,$H,$c->FACETS); 
                  for(my $i=0; $i<$g->dim;$i++){ 
                     if($g->[$i]>0){ 
                        $singular .= "*x(".$i.")^".$g->[$i]; 
                     } 
                  } 
                  $singular .= ","; 
               } 
               $singular .= "0;\n"; 
            } 
         $singular .= "i = std(i);\n";
         $singular .= "def L = Ext(1,syz(i),syz(j));\n";
         $singular .= "def L = Ext(2,syz(i),syz(j));\n";
      }
      print $singular;
   }
}

user_function ext_mat_test(Vector<Integer>){
   my($c) = @_;
   print "C: ",$c,"\n";
   $c = reduce_cf($c);

   if($c == new Vector<Integer>([1])){
      return new Matrix([[0]]);
   }
   if($c == new Vector<Integer>([2])){
      return new Matrix([[0,0],[1,0]]);
   }
   if($c->dim == 1){
      my $N = new Int($c->[0]);
      my $triang = new Matrix(map(zero_vector($_)|ones_vector($N-1-$_), 0..($N-2)));
      $triang = zero_vector($N) / ($triang | zero_vector($N -1));
      # print "Triang:\n",$triang,"\n";
      my $d = new Vector<Integer>($c);
      $d->[0]--;
      my $summand = ext_mat_test($d);
      # print "Summand:\n",$summand,"\n";
      $summand = zero_vector($summand->rows + 1) | ($summand / zero_vector($summand->cols));
      return $triang + $summand;
   }
   my $d = new Vector<Integer>($c->slice(0,1));
   $d->[0]--;
   my $upper_block = ext_mat_test($d);
   my $lower_block = new Matrix([[0]]);
   my $upper_left = new Matrix($upper_block->rows,1);
   print "Upper block:\n",$upper_block,"\n";
   print "Lower block:\n",$lower_block,"\n";
   print "Upper left:\n",$upper_left,"\n";
   
   
   my $c_modified = new Vector<Integer>($c);
   $c_modified->[$c_modified->dim - 1]--;
   if($c->dim%2 == 0){
      for(my $i = 1; $i<=$c_modified->dim; $i++){
         if($i%2 == 1){
            # Replacing the lower block:
            print "Replacing lower block!\n";
            $lower_block = ext_mat_test($c_modified->slice(0,$i));
            while($upper_left->cols < $lower_block->cols){
               $upper_left = $upper_left | $upper_block;
            }
         } else {
            print "Replacing upper block!\n";
            # Replacing the upper block:
            $upper_block = ext_mat_test($c_modified->slice(0,$i));
            while($upper_left->rows < $upper_block->rows){
               $upper_left = $upper_left / $lower_block;
            }
         }
         print "Upper block:\n",$upper_block,"\n";
         print "Lower block:\n",$lower_block,"\n";
         print "Upper left:\n",$upper_left,"\n";
      }
   } else {
      for(my $i = 2; $i<=$c_modified->dim; $i++){
         if($i%2 == 0){
            # Replacing the lower block:
            print "Replacing lower block!\n";
            $lower_block = ext_mat_test($c_modified->slice(0,$i));
            while($upper_left->cols < $lower_block->cols){
               $upper_left = $upper_left | $upper_block;
            }
         } else {
            print "Replacing upper block!\n";
            # Replacing the upper block:
            $upper_block = ext_mat_test($c_modified->slice(0,$i));
            while($upper_left->rows < $upper_block->rows){
               $upper_left = $upper_left / $lower_block;
            }
         }
         print "Upper block:\n",$upper_block,"\n";
         print "Lower block:\n",$lower_block,"\n";
         print "Upper left:\n",$upper_left,"\n";
      }
   }

   my $lower_right = new Matrix(map($upper_left->[$upper_left->rows - $_ - 1], 0..($upper_left->rows - 1)));
   print $lower_right;
   $lower_right = transpose($lower_right);
   my $lower_right = new Matrix(map($lower_right->[$lower_right->rows - $_ - 1], 0..($lower_right->rows - 1)));
   my $summand = ($upper_left | $upper_block) / ($lower_block | $lower_right);
   # print "Summand:\n",$summand,"\n";

   my $N = $summand->cols;
   my $triang = new Matrix(map(zero_vector($_)|ones_vector($N-1-$_), 0..($N-2)));
   # print "Triang:\n",$triang,"\n";
   $triang = zero_vector($N) / ($triang | zero_vector($N -1));
   return $triang + $summand;


}

user_function fill_cq(Int, Vector<Integer>){
   my($N, $c) = @_;
   my $A = ext_mat_test($c);
   my $result = $A;
   while($result->cols+$A->cols < $N){
      $result = $result | $A;
   }
   $result = $result | transpose($A->rows, $c->slice(0, $c->dim - 1));
}

user_function reduce_cf(Vector<Integer>){
   my($c) = @_;
   if(($c->[$c->dim -1] == 1) && ($c->dim > 1)){
      my $d = $c->slice(0,$c->dim -1);
      $d->[$d->dim - 1]--;
      return reduce_cf($d);
   } else {
      return $c;
   }
}









