INCLUDE
   set.rules


object Cone<Rational>{
   
   property PRIMITIVE_RAYS : Matrix<Int>;

   rule PRIMITIVE_RAYS : RAYS {
      my $rays = new Matrix<Rational>($this->RAYS);
      $this->PRIMITIVE_RAYS = new Matrix<Int>(map(primitive($_), @$rays));
   }

}

object Polytope<Rational>{

   property TAUTOLOGICAL_CONE : Cone<Rational>;

   rule TAUTOLOGICAL_CONE : MINKOWSKI_CONE {
      my $p = $this;
      my $mink = $this->MINKOWSKI_CONE;
      my $rays = new Matrix($mink->RAYS);
      $rays /= zero_vector($rays->cols);
      my @generators = ();
      my $i = 0;
      print "-----------------------------------------------\n";
      foreach my $v (@$rays){
         my $vert = $p->MINKOWSKI_CONE_POINT($v)->VERTICES;
         push @generators, map($_->slice(1)|$v, @{$vert});
         if($v != zero_vector($v->dim)){
            print "Compact part of summand ",$i,"\n";
            $i++;
            foreach my $vv (grep($_->[0] == 1, @$vert)){
               print $vv->slice(1), " -- ",$v,"\n";
            }
            print "\n";

         } else {
            print "Tail cone:\n";
            foreach my $vv (grep($_->[0] == 0, @$vert)){
               print $vv->slice(1), " -- ",$v,"\n";
            }

         }

      }
      my $zero = zero_vector($this->MINKOWSKI_CONE->AMBIENT_DIM + $this->DIM);
      @generators = grep($_ != $zero, @generators);
      print "-----------------------------------------------\n";
      $this->TAUTOLOGICAL_CONE = new Cone<Rational>(INPUT_RAYS=>new Matrix(@generators));
   }

}


user_function integer_hull_lars(Polytope<Rational>){
   my($P) = @_;
   if($P->LATTICE){
      return $P;
   }
   my $vertices = $P->VERTICES;
   my @non_lattice_vertices = grep(!is_integral($_),@$vertices);
   my @lattice_vertices = grep(is_integral($_),@$vertices);
   my @new_facets = @{$P->FACETS};
   for my $vertex (@non_lattice_vertices){
      my $vertex_cone_rays = new Matrix(map($_-$vertex, @$vertices));
      my $vertex_cone = new Cone(INPUT_RAYS=>$vertex_cone_rays/$vertex);
      my ($hb) = normaliz_compute($vertex_cone,hilbert_basis=>1,verbose=>1);
      my @good_points = grep($_->[0] == 1, @$hb); #@{$vertex_cone->HILBERT_BASIS});
      my $integer_cone = new Cone(INPUT_RAYS=>$vertex_cone_rays/(new Matrix(@good_points)));
      push @new_facets, @{$integer_cone->FACETS};
      push @lattice_vertices, grep($P->contains($_), @good_points);   
   }
   return(new Matrix(@lattice_vertices), new Matrix(@new_facets));
}



