# @polytopeFiles = `grep -R "polytope::Polytope&lt;Rational&gt;" /home/lars/polymake-source/apps/polytope/testsuite`;
# @coneFiles = `grep -R "polytope::Cone&lt;Rational&gt;" /home/lars/polymake-source/apps/polytope/testsuite`;


sub m2_matrix{
   my($name, $A) = @_;
   my $result = $name." = ";
   if(($A->rows() == 0) || ($A->cols() == 0)){
      $result .= "map(QQ^".$A->rows().", QQ^".$A->cols().", 0);\n";
      return $result;
   }
   $result .= "matrix {{";
   my @rows = map(join(",",@$_), @$A);
   $result .= join("},{", @rows);
   $result .= "}};\n";
   return $result;
}


sub lattice_points_test_inner{
   my($P) = @_;
   my $result = m2_matrix("verticesP", transpose($P->VERTICES->minor(All, ~[0])));
   $result .= m2_matrix("desiredLP", transpose($P->LATTICE_POINTS->minor(All, ~[0])));
   $result .= "desiredLP = sort desiredLP;\n";
   $result .= "P = convexHull(verticesP)\n";
   $result .= "computedLP = sort matrix {latticePoints P};\n";
   $result .= "assert(desiredLP == computedLP);\n";
   return $result;
}

sub test_wrapper_start_file{
   my($method, $file) = @_;
   my $name = split_off_name($file);
   return test_wrapper_start($method, $name);
}

sub test_wrapper_start{
   my($method, $name) = @_;
   my $result = "-- Test ".$name."\n";
   $result .= "-- Checking ".$method."\n";
   $result .= "TEST ///\n";
   return $result;
}

sub test_wrapper_end{
   return "///\n\n";
}

sub split_off_name{
   my($file) = @_;
   my($a, $b) = $file =~ m/(.*)\/(.*\/[^\/]*)/;
   return $b;
}

sub lattice_point_test{
   my($file) = @_;
   my $result = test_wrapper_start_file("latticePoints", $file);
   my $P = User::load($file);
   $result .= lattice_points_test_inner($P);
   $result .= test_wrapper_end();
   return $result;
}

sub hilbert_basis_test_inner{
   my($C) = @_;
   print "Entered.\n";
   my $result = m2_matrix("raysC", transpose(new Matrix($C->RAYS)));
   print "Rays ok.\n";
   $result .= m2_matrix("desiredHB", transpose(new Matrix($C->HILBERT_BASIS)));
   print "Desired ok.\n";
   $result .= "desiredHB = sort desiredHB;\n";
   $result .= "C = posHull(raysC)\n";
   $result .= "computedHB = sort matrix {hilbertBasis C};\n";
   $result .= "assert(desiredHB == computedHB);\n";
   return $result;
}

sub hilbert_basis_test{
   my($file) = @_;
   my $result = test_wrapper_start_file("hilbertBasis", $file);
   print "0: ",$result;
   my $P = User::load($file);
   my $C = new Cone($P);
   $result .= hilbert_basis_test_inner($C);
   $result .= test_wrapper_end();
   return $result;
}

sub fVector_test{
   my($file) = @_;
   my $result = test_wrapper_start_file("fVector", $file);
   print "0: ",$result;
   my $P = User::load($file);
   $result .= fVector_test_inner($P);
   $result .= test_wrapper_end();
   return $result;
}

sub promote_matrix_to_QQ{
   my ($name) = @_;
   my $result = $name;
   $result .= " = promote(";
   $result .= $name;
   $result .= ", QQ);\n";
   return $result;
}

sub polytope_to_m2_dual{
   my($name, $P) = @_;
   my $n = $P->CONE_AMBIENT_DIM;
   if($n == 0){
      $n = $P->FACETS->cols() > $n ? $P->VERTICES->cols() : $n; 
      $n = $P->AFFINE_HULL->cols() > $n ? $P->LINEALITY_SPACE->cols() : $n; 
   }
   my $ineq = new Matrix($P->FACETS);
   if($ineq->rows() == 0){
      $ineq = new Matrix(0, $n);
   }
   my $eq = new Matrix($P->AFFINE_HULL);
   if($eq->rows() == 0){
      $eq = new Matrix(0, $n);
   }
   my $result = m2_matrix("ineqlhs".$name, -$ineq->minor(All, ~[0]));
   $result .= m2_matrix("ineqrhs".$name, $ineq->minor(All, [0]));
   $result .= m2_matrix("eqlhs".$name, -$eq->minor(All, ~[0]));
   $result .= m2_matrix("eqrhs".$name, $eq->minor(All, [0]));
   $result .= $name." = polyhedronFromHData(";
   $result .= "ineqlhs".$name.", ineqrhs".$name.", ";
   $result .= "eqlhs".$name.", eqrhs".$name.");\n";
   return $result;
}

sub polytope_to_m2{
   my($name, $P) = @_;
   my $n = $P->CONE_AMBIENT_DIM;
   if($n == 0){
      $n = $P->VERTICES->cols() > $n ? $P->VERTICES->cols() : $n; 
      $n = $P->LINEALITY_SPACE->cols() > $n ? $P->LINEALITY_SPACE->cols() : $n; 
   }
   my $vertices = new Matrix(grep($_->[0] == 1, @{$P->VERTICES}));
   if($vertices->rows() == 0){
      $vertices = new Matrix(0, $n);
   }
   my $rays = new Matrix(grep($_->[0] == 0, @{$P->VERTICES}));
   if($rays->rows() == 0){
      $rays = new Matrix(0, $n);
   }
   my $lineality = new Matrix($P->LINEALITY_SPACE);
   if($lineality->rows() == 0){
      $lineality = new Matrix(0, $n);
   }
   my $result = m2_matrix("vertices".$name, transpose($vertices->minor(All, ~[0])));
   $result .= m2_matrix("rays".$name, transpose($rays->minor(All, ~[0])));
   $result .= m2_matrix("lineality".$name, transpose($lineality->minor(All, ~[0])));
   $result .= $name." = convexHull(";
   $result .= "vertices".$name.",";
   $result .= "rays".$name.",";
   $result .= "lineality".$name.");\n";
   return $result;
}

sub fVector_test_inner{
   my($P) = @_;
   my $n = $P->DIM;
   my $result = polytope_to_m2("P", $P);
   my $desired = $P->F_VECTOR;
   $desired = join(",", @$desired);
   $desired = "{".$desired.",1};";
   $result .= "desired = ".$desired."\n";
   $result .= "computed = fVector P;\n";
   $result .= "assert(desired == computed)\n";
   return $result;
}


user_function mainHilbertBasisTest(){
   open(FILE, ">hilbert_basis_tests.m2");
   my @polytopeFiles = `grep -R "polytope::Polytope&lt;Rational&gt;" /home/lars/polymake-source/apps/polytope/testsuite`;
   my $i=0;
   foreach my $file (@polytopeFiles){
      print $i,": ",$file,"\n";
      my @split = split(":",$file);
      eval{
         my $P = User::load($split[0]);
         my $C = new Cone($P);
         if($C->POINTED && $C->DIM > 3){
            print $C->HILBERT_BASIS;
            print FILE hilbert_basis_test($split[0]);
         }
      };
      $i++;
   }
   close(FILE);
}


user_function mainlatticepointtest(){
   my @polytopeFiles = `grep -R "polytope::Polytope&lt;Rational&gt;" /home/lars/polymake-source/apps/polytope/testsuite`;
   open(FILE, ">lattice_point_tests.m2");
   my $i=0;
   foreach my $file (@polytopeFiles){
      print $i,": ",$file,"\n";
      my @split = split(":",$file);
      eval{
         my $p = User::load($split[0]);
         print $p->FEASIBLE,"\n";
         if($p->BOUNDED && $p->DIM > 3){
            print FILE lattice_point_test($split[0]);
         }
      };
      $i++;
   }
   close(FILE);
}


user_function mainFVectortest(){
   my @polytopeFiles = `grep -R "polytope::Polytope&lt;Rational&gt;" /home/lars/polymake-source/apps/polytope/testsuite`;
   print "Hello.\n";
   open(FILE, ">/home/lars/fvector_tests.m2");
   print "Hello.\n";
   my $i=0;
   foreach my $file (@polytopeFiles){
      print $i,": ",$file,"\n";
      my @split = split(":",$file);
      eval{
         my $p = User::load($split[0]);
         if(($p->FEASIBLE) && ($p->F_VECTOR->dim > 0)){
            print FILE fVector_test($split[0]);
         }
      };
      $i++;
   }
   close(FILE);
}

user_function mainMinkowskiSum(){
   my @polytopeFiles = `grep -R "polytope::Polytope&lt;Rational&gt;" /home/lars/polymake-source/apps/polytope/testsuite`;
   my @polytopes = map{
      my $file = $_;
      my $bla = 0;
      eval {
         my @split = split(":",$file);
         $bla = User::load($split[0]);
      };
   }@polytopeFiles;
   print "Loaded ".(scalar @polytopes)." polytopes.\n";
   @polytopes = grep{
      my $P = $_;
      my @props = $P->list_properties();
      my $test = (1 == (scalar grep($_ eq "CONE_AMBIENT_DIM", @props)));
      $test |= (1 == (scalar grep($_ eq "POINTS", @props)));
      $test |= (1 == (scalar grep($_ eq "VERTICES", @props)));
      $test
   }@polytopes;
   print "Remaining are ".(scalar @polytopes)." polytopes.\n";
   print "Done\n";
   @polytopes = grep{$_ != 0}@polytopes;
   use List::Util qw( min max );
   print "Hello.\n";
   open(FILE, ">/home/lars/minkowskiSum_tests_raw.m2");
   print "Hello.\n";
   my @dims = map($_->CONE_AMBIENT_DIM, @polytopes);
   for(my $dim = 2; $dim<min(max(@dims), 10); $dim++) {
      print "Dim is ",$dim,"\n";
      my @dPolytopes = grep($_->CONE_AMBIENT_DIM == $dim, @polytopes);
      my $n = @dPolytopes;
      print "Have ",$n," polytopes\n";
      my $numTests = min($n, 10);
      for(my $i=0; $i<$numTests; $i++){
         my $a = int(rand($n));
         my $b = int(rand($n));
         my $P = $dPolytopes[$a];
         my $Q = $dPolytopes[$b];
         my $test = minkowskiSum_test($P, $Q);
         print FILE $test;
      }
   }
   close(FILE);
}

sub minkowskiSum_test{
   my($P, $Q) = @_;
   my $PQ = minkowski_sum($P, $Q);
   my $name = $P->N_VERTICES." ".$P->BOUNDED." - ".$Q->N_VERTICES." ".$Q->BOUNDED;
   print "Name is: ",$name,"\n";
   my $result = test_wrapper_start("minkowskiSum", $name);
   $result .= polytope_to_m2("P", $P);
   $result .= polytope_to_m2("Q", $Q);
   $result .= polytope_to_m2("desired", $PQ);
   $result .= "computed = P+Q;\n";
   $result .= "assert(computed == desired)\n";
   $result .= test_wrapper_end();
   return $result;
}

sub representation_test{
   my($P) = @_;
   my $name = "dim: ".$P->DIM.", ambientDim: ".$P->AMBIENT_DIM.", vertices: ".$P->N_VERTICES.", facets: ".$P->N_FACETS;
   my $result = test_wrapper_start("representation vs dual representation", $name);
   $result .= polytope_to_m2("P", $P);
   $result .= polytope_to_m2_dual("Pd", $P);
   $result .= "assert(Pd == P)\n";
   $result .= "assert(isEmpty Pd === isEmpty P)\n";
   $result .= "assert(isCompact Pd === isCompact P)\n";
   $result .= "assert(isLatticePolytope Pd === isLatticePolytope P)\n";
   if($P->BOUNDED){
      $result .= "assert(isNormal Pd === isNormal P)\n";
   }
   $result .= "assert(numColumns vertices Pd == numColumns vertices P)\n";
   $result .= "assert(numColumns rays Pd == numColumns rays P)\n";
   $result .= "assert(numColumns linealitySpace Pd == numColumns linealitySpace P)\n";
   $result .= "facetsP = facets P;\n";
   $result .= "facetsPd = facets Pd;\n";
   $result .= "assert(numRows (facetsPd#0) == numRows (facetsP#0))\n";
   $result .= "assert(numRows (facetsPd#1) == numRows (facetsP#1))\n";
   $result .= "hyperplanesP = hyperplanes P;\n";
   $result .= "hyperplanesPd = hyperplanes Pd;\n";
   $result .= "assert(numRows (hyperplanesPd#0) == numRows (hyperplanesP#0))\n";
   $result .= "assert(numRows (hyperplanesPd#1) == numRows (hyperplanesP#1))\n";
   $result .= test_wrapper_end();
   return $result;
}

user_function mainRepresentationTest(){
   my @polytopeFiles = `grep -R "polytope::Polytope&lt;Rational&gt;" /home/lars/polymake-source/apps/polytope/testsuite`;
   my @polytopes = map{
      my $file = $_;
      my $bla = 0;
      eval {
         my @split = split(":",$file);
         $bla = User::load($split[0]);
      };
   }@polytopeFiles;
   print "Loaded ".(scalar @polytopes)." polytopes.\n";
   @polytopes = grep{
      my $P = $_;
      my @props = $P->list_properties();
      my $test = (1 == (scalar grep($_ eq "CONE_AMBIENT_DIM", @props)));
      $test |= (1 == (scalar grep($_ eq "POINTS", @props)));
      $test |= (1 == (scalar grep($_ eq "VERTICES", @props)));
      $test
   }@polytopes;
   print "Remaining are ".(scalar @polytopes)." polytopes.\n";
   print "Done\n";
   @polytopes = grep{$_ != 0}@polytopes;
   use List::Util qw( min max );
   print "Hello.\n";
   open(FILE, ">/home/lars/representation_tests_raw.m2");
   print "Hello.\n";
   foreach my $P (@polytopes){
      # eval{
            print FILE representation_test($P);
      #};
   }
   close(FILE);
}


user_function main_ehrhartAndVolume_test(){
   my @polytopeFiles = `grep -R "polytope::Polytope&lt;Rational&gt;" /home/lars/polymake-source/apps/polytope/testsuite`;
   open(FILE, ">ehrhart_and_volume_tests.m2");
   my $i=0;
   foreach my $file (@polytopeFiles){
      print $i,": ",$file,"\n";
      my @split = split(":",$file);
      eval{
         my $p = User::load($split[0]);
         print $p->FEASIBLE,"\n";
         if($p->BOUNDED){
            print FILE ehrhart_and_volume_test($split[0]);
         }
      };
      $i++;
   }
   close(FILE);
}


sub ehrhart_and_volume_test{
   my($file) = @_;
   my $result = test_wrapper_start_file("ehrhart and volume", $file);
   my $P = User::load($file);
   $result .= polytope_to_m2("P", $P);
   $result .= polytope_to_m2_dual("Pd", $P);
   my $wishvolume = new Rational($P->LATTICE_VOLUME,1);
   for(my $i=1; $i<=$P->DIM; $i++){
      $wishvolume /= $i;
   }
   $result .= "assert(volume P == ".$wishvolume.")\n";
   $result .= "assert(volume Pd == ".$wishvolume.")\n";
   my $ehrhart = $P->EHRHART_POLYNOMIAL_COEFF;
   $ehrhart = "{".join(",",@$ehrhart)."}";
   $result .= "LE = reverse ".$ehrhart.";\n";
   $result .= "etest = vector apply(LE, e->promote(e, QQ));\n";
   $result .= "ep = vector apply(flatten entries (coefficients ehrhart P)#1, e->lift(e, QQ));\n";
   $result .= "epd = vector apply(flatten entries (coefficients ehrhart Pd)#1, e->lift(e, QQ));\n";
   $result .= "assert(ep == etest)\n";
   $result .= "assert(epd == etest)\n";
   $result .= test_wrapper_end();
   return $result;
}
