user_function _4ti2Circuits(Matrix){
   my($B) = @_;
   my $A = transpose($B);
   #my $tempname = new Tempfile;
   my $tempname = "bla";
   open(my $filePipe, ">".$tempname.".mat");
   print $filePipe $A->rows." ".$A->cols."\n";
   print $filePipe new Matrix($A);
   close($filePipe);
   system("circuits -q ".$tempname);

  
   open(my $outfile, "<$tempname.cir")
      or die "can't open output file $tempname.cir: $!";
   my $dimline = <$outfile>;
   my @circuits=();
   my $i;
   while (<$outfile>) {
      my @vec = split;
      push @circuits, \@vec;
      $i++;
   }

   return new Matrix(@circuits);
}

sub is_contained{
   # Is f1 contained in f2? Those are facet values.
   my($f1, $f2) = @_;
   my $difference = $f1 - $f2;
   return minimum($difference) >= 0;
}

user_function step3(Matrix, Matrix, Matrix){
   my($C, $U, $facets) = @_;
   my $C2sVectors = _4ti2Circuits($C);
   my $facetValues1 = transpose($facets * transpose($U));

   # Preprocessing:
   my @preGenPairs = ();
   foreach my $circuit (@$C2sVectors){
      my $circuitSet = new Set<Int>(grep($circuit->[$_]!=0, 0..($circuit->dim -1)));
      my $degreePolytopeFacetValues = intersect_cones($circuitSet, $facetValues1);
      push @preGenPairs, new Pair<Vector, Vector>($circuit, $degreePolytopeFacetValues);
   }

   my @remember = ();
   my $size = @preGenPairs;
   print "We currently have ",$size," circuits to consider.\n";
   while($size > 0){
      my $currentPair = pop @preGenPairs;
      my @containers = grep{is_contained($currentPair->[1], $_->[1])}@remember,@preGenPairs;
      my @circuits = map($_->[0], @containers);
      my $circuitMatrix = new Matrix(@circuits);
      my $rank = rank($circuitMatrix);
      my $rankExtended = rank($circuitMatrix/$currentPair->[0]);
      if($rank != $rankExtended){
         push @remember, $currentPair;
         print $size," remember.\n";
      } else {      
         print $size," forget.\n";
      }
      $size = @preGenPairs;
   }

   my $n = @remember;

   print "I will compute ",$n," Hilbert bases.\n";
   
   # Computing generators:
   my @generatorPairs = ();

   my $counter = 0; 
   foreach my $circuitPair (@remember){
      my $generators = find_generators($circuitPair->[1], $facets);
      foreach my $gen (@$generators){
         push @generatorPairs, new Pair<Vector, Vector>($circuitPair->[0], $gen);
      }
      print $counter," ";
      $counter++;
   }
   print "\n";
   
   my $size = @generatorPairs;
   print "We have ",$size,"Generators.\n";

   my %numberedPairs = ();
   my $i = 0;
   for my $pair (@generatorPairs){
      $numberedPairs{$i} = $pair;
      $i++;
   }
   
   my $graph = new Matrix($size, $size);

   for(my $i=0; $i<$size; $i++){
      for(my $j=0; $j<$size and $j!=$i; $j++){
         my $geni = $numberedPairs{$i};
         my $genj = $numberedPairs{$j};
         my $difference = $geni->[1] - $genj->[1];
         my $check = minimum($facets*$difference);
         if($check >= 0){
            $graph->($i,$j) = 1;
         }
      }
   }

   my $C2 = new Matrix(map($_->[0],@generatorPairs));
   my $U2 = new Matrix(map($_->[1],@generatorPairs));
   my @forget = ();
   for(my $i=0; $i<$size; $i++){
      my $outgoing = $graph->row($i);
      my @indices = grep($outgoing->[$_]!=0, 0..($size-1));
      print @indices,"\n";
      my $minor = $C2->minor([@indices], All);
      my $rank = rank($minor);
      my $rankExtended = rank($minor/$C2->[$i]);
      
      if($rank == $rankExtended){
         push @forget, $i;
         $graph->col($i) = zero_vector($size);
      }
   }
   
   $C2 = $C2->minor(~[@forget], All);
   $U2 = $U2->minor(~[@forget], All);
   

   # print $graph;
   return($C2, $U2);

}

user_function step2(Matrix, Matrix, Matrix){
   my($C, $U, $facets) = @_;
   my $matroid = new Matroid(POINTS=>$C);
   my $facetValues1 = transpose($facets * transpose($U));
   my @C2sSets = @{$matroid->CIRCUITS};
   my @C2sVectors = ();
   my @facetValues2 = ();

   foreach my $circuit (@C2sSets){
      my $circuitVector = find_circuit_coefficients($C, $circuit);
      my $degreePolytopeFacetValues = intersect_cones($circuit, $facetValues1);
      # print $circuit,"\n",$facetValues,"\n";
      # print $degreePolytopeFacetValues,"\n";
      # my $degreePolytope = new Polytope(INEQUALITIES=>(-$degreePolytopeFacetValues|$facets));
      # print "Generators:\n",$generators,"\n";
      push @facetValues2, $degreePolytopeFacetValues;
      push @C2sVectors, $circuitVector;
   }

   my $C2s = new Matrix(@C2sVectors);
   my $facetValues2 = new Matrix(@facetValues2);

   print "C2s:\n",$C2s;
   
   
   my @C3s = @{(new Matroid(POINTS=>$C2s))->CIRCUITS};
   # print @C3s;
   @C3s = map(find_circuit_coefficients($C2s,$_), @C3s);
   my $C3s = new Matrix(@C3s);
   
   print "C3s:\n",$C3s;
   

   my $shift = 0;
   my $n = $C2s->rows;
   my $collectedDegrees = new Matrix(0,$facets->cols);
   my $collectedCircuits = new Matrix(0,$C2s->cols);
   for(my $i=0; $i<$n; $i++){
      my $position = $i + $shift;
      print "Position: ",$position,"\n";
      my @relevantCircuits = ();
      print "C3s rows: ",$C3s->rows,"\n";
      if($C3s->rows > 0){
         @relevantCircuits = grep($_->[$position] !=0, @$C3s);
      } 
      my $generators = find_generators($facetValues2->[$position], $facets);
      print "Generator candidates:\n",$generators;
      foreach my $circuit (@relevantCircuits){
         $generators = eliminate_generators($position, $circuit, $generators, $facetValues2, $facets);
         print "Number of generator candidates left: ",$generators->rows,"\n";
      }
      print "The following generators are left:\n",$generators,"for the circuit\n",$C2s->[$i],"\n";
      # $generators = $generators->minor(All,~[0]);
      
      my $numGens = $generators->rows;
      if($numGens == 0){
         $facetValues2 = $facetValues2->minor(~[$position], All);
         $C3s = new Matrix(grep($_->[$position]==0, @$C3s));
         $C3s = $C3s->minor(All, ~[$position]);
         $shift--;
      } else {
         $collectedDegrees /= $generators;
         $collectedCircuits /= repeat_row($C2s->[$i], $numGens);
         print "Gens:\n",$generators,"\nFacets:\n",$facets;
         my $insertFacetValues = $generators * transpose($facets);
         my $before = $facetValues2->minor([0..($position-1)], All);
         my $after = $facetValues2->minor([($position+1)..($facetValues2->rows-1)], All);
         $facetValues2 = $before/($insertFacetValues / $after);
         $C3s = blow_up_circuits($position, $numGens, $C3s);
         $shift += $numGens-1;
      }


      print "Current facet values:\n",$facetValues2;
      print "Current circuits:\n",$C3s;
      $facetValues2 = new Matrix($facetValues2);
      $C3s = new Matrix($C3s);
      # if($generators->rows == 0){
      #    ($C2s, $C3s, $facetValues2) = eliminate_circuit($position, $C2s, $C3s, $facetValues2);
      # } else {
      #    ($C2s, $C3s, $facetValues2) = blow_up($position, $C2s, $C3s, $facetValues2, $generators);
      # }
   }
   
   print "The result is:\nCircuits:\n",$collectedCircuits,"\nDegrees:\n",$collectedDegrees,"\n";

   return($collectedCircuits,$collectedDegrees);

}

sub blow_up_circuits{
   my($index, $blow_up, $circuits) = @_;
   print "Circuits to blow up:\n",$circuits;
   my @non_zeroes = grep($_->[$index] != 0, @$circuits);
   my @zeroes = grep($_->[$index] == 0, @$circuits);
   my @result = ();
   # Blowing up non-zeroes:
   foreach my $circuit (@non_zeroes){
      for(my $i=0; $i<$blow_up; $i++){
         my $val = $circuit->[$index];
         my $add = $val * unit_vector($blow_up, $i);
         if($index == 0){
            my $new_circuit = $add|$circuit->slice($index+1,$circuit->dim-$index-1);
            push @result, $new_circuit;
         } elsif ($index == $circuit->dim -1){
            my $new_circuit = $circuit->slice(0,$index)|$add;
            push @result, $new_circuit;
         } else {
            my $new_circuit = $circuit->slice(0,$index)|$add|$circuit->slice($index+1,$circuit->dim-$index-1);
            push @result, $new_circuit;
         }
      }
   }
   # Blowing up zeroes:
   foreach my $circuit (@zeroes){
      my $add = zero_vector($blow_up);
      if($index == 0){
         my $new_circuit = $add|$circuit->slice($index+1,$circuit->dim-$index-1);
         push @result, $new_circuit;
      } elsif ($index == $circuit->dim -1){
         my $new_circuit = $circuit->slice(0,$index)|$add;
         push @result, $new_circuit;
      } else {
         my $new_circuit = $circuit->slice(0,$index)|$add|$circuit->slice($index+1,$circuit->dim-$index-1);
         push @result, $new_circuit;
      }
   }
   return new Matrix(@result);
}

sub eliminate_generators{
   my($position, $circuit, $generators, $facetValues2, $facets) = @_;
   $generators = new Matrix(ones_vector | $generators);
   my @generators = @$generators;
   my @non_zeroes = grep($circuit->[$_]!=0, 0..($circuit->dim -1));
   my $intersectionFacetValues = intersect_cones((new Set<Int>(@non_zeroes)), $facetValues2);
   my $intersection = new polytope::Polytope(INEQUALITIES=>(-$intersectionFacetValues|$facets));
   @generators = grep(!($intersection->contains($_)), @generators);
   @generators = map($_->slice(1), @generators);
   return new Matrix(@generators);
}

user_function step1(Matrix, Matrix, Matrix){
   my($C, $U, $facets) = @_;
   my $matroid = new Matroid(POINTS=>$C);
   my $facetValues = transpose($facets * transpose($U));
   my @allCircuitsAsSets = @{$matroid->CIRCUITS};
   my @allCircuitsAsVectors = ();

   my $degreePolytopeMap = new Map<Vector, Vector>();
   my $generatorMap = new Map<Vector, Matrix>();

   foreach my $circuit (@allCircuitsAsSets){
      my $circuitVector = find_circuit_coefficients($C, $circuit);
      my $degreePolytopeFacetValues = intersect_cones($circuit, $facetValues);
      # print $circuit,"\n",$facetValues,"\n";
      # print $degreePolytopeFacetValues,"\n";
      # my $degreePolytope = new Polytope(INEQUALITIES=>(-$degreePolytopeFacetValues|$facets));
      my $generators = find_generators($degreePolytopeFacetValues, $facets);
      # print "Generators:\n",$generators,"\n";
      $degreePolytopeMap->{$circuitVector} = $degreePolytopeFacetValues;
      $generatorMap->{$circuitVector} = $generators;
      push @allCircuitsAsVectors, $circuitVector;
   }

   print "DegreePolytopeMap:\n",$degreePolytopeMap,"\n";
   print "GeneratorMap:\n",$generatorMap,"\n";

   my $allCircuitMatrix = new Matrix(@allCircuitsAsVectors);
   my @relations = @{(new Matroid(POINTS=>$allCircuitMatrix))->CIRCUITS};
   @relations = map(find_circuit_coefficients($allCircuitMatrix,$_), @relations);

   my $switch = 0;
   for(my $i=0; $i<$allCircuitMatrix->rows; $i++){
      my @relevantRelations = grep($_->[$switch+$i]!=0, @relations);
   }
}

sub find_generators{
   my($degreePolytopeFacetValues, $facets) = @_;
   my $degreePolytope = new polytope::Polytope(INEQUALITIES=>(-$degreePolytopeFacetValues|$facets));
   # print $degreePolytope->VERTICES,"\n";
   my $degreeCone = new polytope::Cone($degreePolytope);
   my $HilbertBasis = $degreeCone->HILBERT_BASIS;
   my $result = new Matrix(grep($_->[0]==1, @$HilbertBasis));
   return $result->minor(All,~[0]);
}

sub intersect_cones{
   my($circuit, $facetValues) = @_;
   my $activeCones = $facetValues->minor($circuit, All);
   return componentwise_maximum($activeCones);
}

sub componentwise_maximum{
   my($vectors) = @_;
   my @columns = @{transpose($vectors)};
   my @maxValues = map(maximum($_), @columns);
   return new Vector(@maxValues);
}

user_function step(Matrix, Matrix, Matrix){
   my($C, $U, $facets) = @_;
   my $matroid = new Matroid(POINTS=>$C);
   my $newC = new Matrix(0,$C->rows);
   my $newU = new Matrix(0,$C->rows);
   foreach my $circuit (@{$matroid->CIRCUITS}){
      my $degrees = $U->minor($circuit, All);
      print "Degrees:\n",$degrees,"\n";
      my $coefficients = find_circuit_coefficients($C, $circuit);
      print "Coeffs ok.\n";
      my $gens = find_gens_of_intersection($facets, $degrees);
      print "Ok so far.\n";
      foreach my $degree (@$gens){
         $newC = $coefficients / $newC;
         $newU = $degree / $newU;
         print "Matrices done.\n";
         
         ($newC, $newU) = reduce_first($newC, $newU, $facets);
      }
   }
   return($newC, $newU);
}

user_function reduce_first(Matrix, Matrix, Matrix){
   my($C, $U, $facets) = @_;
   my $matroid = new Matroid(POINTS=>$C);
   print $matroid->CIRCUITS;
   my @circuits_with_zero = grep($_->contains(0), @{$matroid->CIRCUITS});
   print @circuits_with_zero;
   my $s = @circuits_with_zero;
   my @erase = ();
   while($s > 0){
      my $circuit = pop @circuits_with_zero;
      print "Trying circuit: ",$circuit,"\nMatrix\n",$U,"\n";
      my $index = find_sink($C, $U, $facets, $circuit);
      if($index != -1){
         @circuits_with_zero = grep(!$_->contains($index), @circuits_with_zero);
         push @erase, $index;
      }
      $s = @circuits_with_zero;
   }
   my $s = new Set<Int>(@erase);
   return(new Matrix($C->minor(~(new Set<Int>(@erase)),All)), new Matrix($U->minor(~(new Set<Int>(@erase)),All)));
}

sub find_sink{
   my($C, $U, $facets, $circuit) = @_;
   my @indices = @$circuit;
   my $s = @indices;
   while($s > 1){
      print @indices, "\n";
      my $c1 = pop @indices;
      my $c2 = pop @indices;
      print "Facets:\n",$facets,"\n";
      print "Vec:\n",$U->[$c1] - $U->[$c2],"\n";
      my $eval = $facets*($U->[$c1] - $U->[$c2]);
      my $max_eval = maximum($eval);
      my $min_eval = minimum($eval);
      if($min_eval >= 0){
         push @indices, $c1;
      } elsif ($max_eval <= 0) {
         push @indices, $c2;
      }
      $s = @indices;
   }
   print @indices, "\n";
   if($s == 0){
      return -1;
   } else {
      my $candidate = pop @indices;
      foreach my $index (@$circuit){
         my $min_eval = minimum($facets*($U->[$candidate]-$U->[$index]));
         if($min_eval < 0){
            return -1;
         }
      }
      print "Found one: ",$candidate,"\n";
      return $candidate;
   }
   return -1;
}


user_function find_circuit_matrix(Matrix){
   my($C) = @_;
   my $matroid = new Matroid(POINTS=>$C);
   my @circuits = ();
   foreach my $circuit (@{$matroid->CIRCUITS}){
      my $coefficients = find_circuit_coefficients($C, $circuit);
      push @circuits, $coefficients;
   }
   return new Matrix(@circuits);
}

sub find_circuit_coefficients{
   my($C, $circuit) = @_;
   my $submat = $C->minor($circuit,All);
   # print "Submat:\n",$submat;
   # print "circuit:\n",$circuit,"\n";
   # print "circuit:\n",$circuit->type->full_name,"\n";
   $submat = transpose($submat);
   my $non_zero_coefficients = null_space($submat)->[0];
   # print "Non-zero:\n",$non_zero_coefficients,"\n";
   my $result = new Vector($C->rows);
   my $i=0;
   foreach my $index (@$circuit){
      # print "circuit:\n",$circuit,"\n";
      $result->[$index] = $non_zero_coefficients->[$i];
      $i++;
   }
   return $result;
}

user_function find_gens_of_intersection{
   my($facets, $degrees) = @_;
   my $eval = $facets * transpose($degrees);
   my $intersection_facet_values = new Vector(map(maximum($_), @$eval));
   my $intersection = new polytope::Polytope(INEQUALITIES=>(-$intersection_facet_values|$facets));
   my $cone = new polytope::Cone($intersection);
   my $hilbert_basis = $cone->HILBERT_BASIS;
   my $result = new Matrix(grep($_->[0]==1, @$hilbert_basis));
   return $result->minor(All,~[0]);
}

user_function find_circuits(Matrix){
   my($A) = @_;
   my $total = $A->rows;
   my $max_rows = $A->cols;
   my @candidates = ();
   for(my $i=0; $i<$total; $i++){
      push @candidates, new Set<Int>($i);
   }
   my @result = ();
   my $numc = @candidates;
   while($numc>0){
      print "Currently there are ",$numc," candidates.\n";
      my @newCandidates = ();
      my @staying = ();
      print "Candidates: ";
      foreach my $candidate (@candidates){
         print $candidate,", ";
         my $testmat = $A->minor($candidate, All);
         my $testrank = rank($testmat);
         if($testrank < $candidate->size){
            if($testrank == $candidate->size-1){
               push @result, $candidate;
            }
         } else {
            push @staying, $candidate;
         }
      }
      print "\nNew elements: ";
      foreach my $candidate (@staying){
         for(my $i = maximum($candidate)+1; $i<$total; $i++){
            my $new = $candidate+$i;
            my $check = 1;
            foreach my $circuit (@result){
               if($new*$circuit == $circuit){
                  $check=0;
                  last;
               }
            }
            if($check){
               print $new,", ";
               push @newCandidates, $new;
            }
         }
      }
      print "Result: ",@result,"\n";
      @candidates = @newCandidates;
      $numc = @candidates;
   }
   return @result;
}
