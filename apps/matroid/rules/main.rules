
declare property_type Preprocessor : c++ (include => ['polymake/matroid/preprocess.h']) {
   
   method construct(Int, Matrix) : c++;

   method add(SparseVector) : c++;

   method show() : c++;

   method interreduce() : c++;

   method give() : c++;
   
}

INCLUDE
   _4ti2.rules
   circuit_computation.rules
   resolution.rules



sub compare_dp{
   my($f1, $f2) = @_;
   my $i = 0;
   if($f1*ones_vector($f1->dim) < $f2 * ones_vector($f2->dim)){
      return 1;
   } elsif($f1*ones_vector($f1->dim) > $f2 * ones_vector($f2->dim)){
      return -1;
   }
   while(($f1->[$i] == $f2->[$i]) && ($i<$f1->dim-1)){
      $i++;
   }
   if($f1->[$i] < $f2->[$i]){
      return 1;
   } elsif ($f1->[$i] > $f2->[$i]){
      return -1;
   }
   return 0;
}

sub compare_lex{
   my($f1, $f2) = @_;
   my $i = 0;
   while(($f1->[$i] == $f2->[$i]) && ($i<$f1->dim-1)){
      $i++;
   }
   if($f1->[$i] < $f2->[$i]){
      return 1;
   } elsif ($f1->[$i] > $f2->[$i]){
      return -1;
   }
   return 0;
}

sub is_contained{
   # Is f1 contained in f2? Those are facet values.
   my($f1, $f2) = @_;
   my $difference = $f1 - $f2;
   return minimum($difference) >= 0;
}

sub is_superflous{
   my($pair, @reductor) = @_;
   my @containerCircuits = map{$_->[0]}grep{is_contained($pair->[1], $_->[1])}@reductor;
   my $circuitMatrix = new Matrix(@containerCircuits);
   my $rank = rank($circuitMatrix);
   my $rankExtended = rank($circuitMatrix/$pair->[0]);
   if($rank != $rankExtended){
      # print "Remember. ";
      return 0;
   } else {      
      # print "Forget. ";
      return 1;
   }
}

sub preprocess_old{
   my @pairs = @_;
   my $size = @pairs;
   print "\nThere are ".$size." pairs to consider.\n";
   if($size > 10){
      # print "I will preprocess_old!\n";
      my $first = floor($size/2);
      my $m = @pairs;
      $size == $m or die "Something went awfully wrong.";
      @pairs = sort{compare_lex($b->[1],$a->[1])}@pairs;
      my @smallest = @pairs[0..$first];
      @smallest = preprocess_old(@smallest);
      my @rest = @pairs[($first+1)..($size-1)];
      @rest = grep(!is_superflous($_,@smallest), @rest);
      @pairs = (@smallest,@rest);
   }


   my @remember = ();
   $size = @pairs;
   print "\nWe currently have ",$size," circuits to consider.\n";
   while($size > 0){
      my $currentPair = pop @pairs;
      my $test = is_superflous($currentPair,@remember,@pairs);
      if(!$test){
         push @remember, $currentPair;
         # print $size," remember. ";
      } else {      
         # print $size," forget. ";
      }
      $size = @pairs;
   }
   return @remember;
}


sub blow_up_circuits{
   my($index, $blow_up, $circuits) = @_;
   print "Circuits to blow up:\n",$circuits;
   my @non_zeroes = grep($_->[$index] != 0, @$circuits);
   my @zeroes = grep($_->[$index] == 0, @$circuits);
   my @result = ();
   # Blowing up non-zeroes:
   foreach my $circuit (@non_zeroes){
      for(my $i=0; $i<$blow_up; $i++){
         my $val = $circuit->[$index];
         my $add = $val * unit_vector($blow_up, $i);
         if($index == 0){
            my $new_circuit = $add|$circuit->slice($index+1,$circuit->dim-$index-1);
            push @result, $new_circuit;
         } elsif ($index == $circuit->dim -1){
            my $new_circuit = $circuit->slice(0,$index)|$add;
            push @result, $new_circuit;
         } else {
            my $new_circuit = $circuit->slice(0,$index)|$add|$circuit->slice($index+1,$circuit->dim-$index-1);
            push @result, $new_circuit;
         }
      }
   }
   # Blowing up zeroes:
   foreach my $circuit (@zeroes){
      my $add = zero_vector($blow_up);
      if($index == 0){
         my $new_circuit = $add|$circuit->slice($index+1,$circuit->dim-$index-1);
         push @result, $new_circuit;
      } elsif ($index == $circuit->dim -1){
         my $new_circuit = $circuit->slice(0,$index)|$add;
         push @result, $new_circuit;
      } else {
         my $new_circuit = $circuit->slice(0,$index)|$add|$circuit->slice($index+1,$circuit->dim-$index-1);
         push @result, $new_circuit;
      }
   }
   return new Matrix(@result);
}

sub eliminate_generators{
   my($position, $circuit, $generators, $facetValues2, $facets) = @_;
   $generators = new Matrix(ones_vector | $generators);
   my @generators = @$generators;
   my @non_zeroes = grep($circuit->[$_]!=0, 0..($circuit->dim -1));
   my $intersectionFacetValues = intersect_cones_old((new Set<Int>(@non_zeroes)), $facetValues2);
   my $intersection = new polytope::Polytope(INEQUALITIES=>(-$intersectionFacetValues|$facets));
   @generators = grep(!($intersection->contains($_)), @generators);
   @generators = map($_->slice(1), @generators);
   return new Matrix(@generators);
}


sub find_generators{
   my($degreePolytopeFacetValues, $facets) = @_;
   my $degreePolytope = new polytope::Polytope(INEQUALITIES=>(-$degreePolytopeFacetValues|$facets));
   # print $degreePolytope->VERTICES,"\n";
   my $degreeCone = new polytope::Cone($degreePolytope);
   my $HilbertBasis = $degreeCone->HILBERT_BASIS;
   my $result = new Matrix(grep($_->[0]==1, @$HilbertBasis));
   return $result->minor(All,~[0]);
}

sub intersect_cones_old{
   my($circuit, $facetValues) = @_;
   my $activeCones = $facetValues->minor($circuit, All);
   return componentwise_maximum($activeCones);
}

sub componentwise_maximum{
   my($vectors) = @_;
   my @columns = @{transpose($vectors)};
   my @maxValues = map(maximum($_), @columns);
   return new Vector(@maxValues);
}



sub find_sink{
   my($C, $U, $facets, $circuit) = @_;
   my @indices = @$circuit;
   my $s = @indices;
   while($s > 1){
      print @indices, "\n";
      my $c1 = pop @indices;
      my $c2 = pop @indices;
      print "Facets:\n",$facets,"\n";
      print "Vec:\n",$U->[$c1] - $U->[$c2],"\n";
      my $eval = $facets*($U->[$c1] - $U->[$c2]);
      my $max_eval = maximum($eval);
      my $min_eval = minimum($eval);
      if($min_eval >= 0){
         push @indices, $c1;
      } elsif ($max_eval <= 0) {
         push @indices, $c2;
      }
      $s = @indices;
   }
   print @indices, "\n";
   if($s == 0){
      return -1;
   } else {
      my $candidate = pop @indices;
      foreach my $index (@$circuit){
         my $min_eval = minimum($facets*($U->[$candidate]-$U->[$index]));
         if($min_eval < 0){
            return -1;
         }
      }
      print "Found one: ",$candidate,"\n";
      return $candidate;
   }
   return -1;
}



sub find_circuit_coefficients{
   my($C, $circuit) = @_;
   my $submat = $C->minor($circuit,All);
   # print "Submat:\n",$submat;
   # print "circuit:\n",$circuit,"\n";
   # print "circuit:\n",$circuit->type->full_name,"\n";
   $submat = transpose($submat);
   my $non_zero_coefficients = null_space($submat)->[0];
   # print "Non-zero:\n",$non_zero_coefficients,"\n";
   my $result = new Vector($C->rows);
   my $i=0;
   foreach my $index (@$circuit){
      # print "circuit:\n",$circuit,"\n";
      $result->[$index] = $non_zero_coefficients->[$i];
      $i++;
   }
   return $result;
}

user_function find_gens_of_intersection{
   my($facets, $degrees) = @_;
   my $eval = $facets * transpose($degrees);
   my $intersection_facet_values = new Vector(map(maximum($_), @$eval));
   my $intersection = new polytope::Polytope(INEQUALITIES=>(-$intersection_facet_values|$facets));
   my $cone = new polytope::Cone($intersection);
   my $hilbert_basis = $cone->HILBERT_BASIS;
   my $result = new Matrix(grep($_->[0]==1, @$hilbert_basis));
   return $result->minor(All,~[0]);
}

