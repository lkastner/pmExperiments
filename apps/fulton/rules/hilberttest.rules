user_function cqs_to_hb( $ ){
   my($cqs) = @_;
   my $b1 = new Vector(0,1);
   my $b2 = new Vector(1,1);
   my @result = ($b1, $b2);
   foreach my $entry (@{$cqs->DUAL_CONTINUED_FRACTION}){
       my $b3 = new Vector(($entry * $b2) - $b1);
       push @result, $b3;
       $b1 = $b2;
       $b2 = $b3;
   }
   return @result;
}

user_function compute_ext_degrees( $ , $ , $ ){
   my($i, $j, $cqs) = @_;
   # Canonical!
   my $dcf = $cqs->DUAL_CONTINUED_FRACTION;
   my $hb = new Matrix(cqs_to_hb($cqs));
   my ($canonical, $cshift) = get_canonical($hb);
   print "Canonical: $canonical, $cshift.\n";
   my $cj = $j + $canonical;
   my ($newi, $newj, $shift) = adjust_entries($i, $cj, $hb);
   print "New: $newi, $newj, $shift.\n";
   my $result = recursion($newi, $newj, $dcf, $hb);
   return new Matrix(map($_ + $cshift - $shift, @$result));
}

sub get_canonical{
   my($hb) = @_;
   my $last = new Vector($hb->[$hb->rows - 1]);
   my $secondlast = new Vector($hb->[$hb->rows - 2]);
   my $n = $last->[0];
   my $q = $last->[1];
   my $gendiff = $secondlast->[0] - 1;
   my $index = $n - $gendiff;
   my $shift = new Vector(1-$index,($q+1-$index*$q)/$n);
   return ($index, $shift);
}

sub adjust_entries{
   my($i, $j, $hb) = @_;
   my $last = new Vector($hb->[$hb->rows - 1]);
   my $n = $last->[0];
   my $q = $last->[1];
   my $shift = new Vector(0,0);
   my ($newi, $ishift) = adjust_entry($i, $n, $last);
   my ($newj, $jshift) = adjust_entry($j, $n, $last);
   return ($newi, $newj, $ishift + $jshift);
}

sub adjust_entry{
   my($i, $n, $last) = @_;
   my $shift = new Vector(0,0);
   while($i < 1){
      $i += $n;
      $shift -= $last;
   }
   while($i >= $n){
      print "Going in. $i, $n.\n";
      $i -= $n;
      $shift += $last;
   }
   return ($i, $shift);
}

sub recursion{
   my($i, $j, $dcf, $hb) = @_;
   if($dcf->dim == 0){
      return new Matrix(0,2);
   }
   print "Input data: i: $i, j: $j,\nDCF: $dcf,\nHB: $hb.\n-------\n";
   if($dcf->[$dcf->dim - 1] > 2){
      return gt2case($i, $j, $dcf, $hb);
   } elsif ($dcf->[$dcf->dim - 1] == 2){
      return eq2case($i, $j, $dcf, $hb);
   } else {
      die "Input error dcf: $dcf";
   }
}

sub gt2case{
   my($i, $j, $dcf, $hb) = @_;
   print "Entering >2 case.\n";
   my $last = new Vector($hb->[$hb->rows - 1]);
   my $secondlast = new Vector($hb->[$hb->rows - 2]);
   my $n = $last->[0];
   my $q = $last->[1];
   my $newlast = $last - $secondlast;
   my $ntilda = $newlast->[0];
   my $qtilda = $newlast->[1];
   my $diff = $n - $ntilda;
   if(($diff < $i) and ($diff < $j)){
      my $newi = $i-$diff;
      my $newj = $j-$diff;
      my $newdcf = new Vector($dcf);
      $newdcf->[$dcf->dim -1]--;
      my $newhb = new Matrix($hb->minor(~[$hb->rows -1], All) / $newlast);
      my $result = recursion($newi, $newj, $newdcf, $newhb);
      print "Old result:\n",$result,"-----\n";
      # print "Old result:\n",$result;
      if($result->rows > 0){
         $result = new Matrix(map($_ + 2*$secondlast, @$result));
      }
      if($i+$j <= $n){
         return new Matrix($result / $last);
      } else {
         return new Matrix($result);
      }
   } elsif ($i <= $diff){
      my $newi = $i + $ntilda;
      my $previous = recursion($newi, $j, $dcf, $hb);
      my $result = new Matrix(map($_ + $secondlast, @$previous));
      print "Old result:\n",$result,"DCF: $dcf\n-----\n";
      if($j <= $n - $i){
         return new Matrix($result / $last);
      } else {
         return new Matrix($result);
      }
   } else {
      return recursion($j, $i, $dcf, $hb);
   }

}

sub eq2case{
   my($i, $j, $dcf, $hb) = @_;
   print "Entering ==2 case. i: $i, j: $j, dcf: $dcf\n";
   my $last = new Vector($hb->[$hb->rows - 1]);
   my $newlast = new Vector($hb->[$hb->rows - 2]);
   my $n = $last->[0];
   my $q = $last->[1];
   my $ntilda = $newlast->[0];
   my $qtilda = $newlast->[1];
   if(($i <= $ntilda) and ($j <= $ntilda)){
      print "Going into if part.\n";
      my $newdcf = new Vector($dcf->slice([0..($dcf->dim -2)]));
      my $newhb = new Matrix($hb->minor([0..($hb->rows -2)], All));
      my $result = recursion($i, $j, $newdcf, $newhb);
      print "Old result:\n",$result,"-----\n";
      if($i+$j <= $n){
         return new Matrix($result / $last);
      } else {
         return new Matrix($result);
      }

   } elsif ($ntilda < $i){
      print "Going into else part.\n";
      my $diff = $n - $ntilda;
      my $fix = $last - $newlast;
      my $newi = $i - $diff;
      my $result = recursion($newi, $j, $dcf, $hb);
      print "Old result:\n",$result,"-----\n";
      print "n: $n, i: $i, j: $j.\n";
      if($j > ($n - $i)){
         $result = new Matrix(grep($_ != (new Vector($n, $q)), @$result));
         print "Grepped:\n",$result,"-----\n";
      }
      return new Matrix(map($_ + $fix, @$result));
   } else {
      return recursion($j, $i, $dcf, $hb);
   }


}
