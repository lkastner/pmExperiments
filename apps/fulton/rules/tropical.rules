user_function edge_elimination(Polynomial, Polynomial){
   my($f, $g) = @_;
   my @badCones = find_bad_cones($f, $g);
   my @result = ($f, $g);
   foreach my $bc (@badCones) {
      my $test = build_witness($f, $g, $bc);
   }
}

sub build_witness{
   my($f, $g, $bc) = @_;
   my $w = ones_vector($bc->RAYS->rows) * ($bc->RAYS);
   my $fe = get_face_polynomial($f, $w);
   my $ge = get_face_polynomial($g, $w);
   my $edgeDirection = get_edge_vector($fe);


}


sub position_polynomial_at_zero{
   my($f, $edgeDirection) = @_;
   my $fExponents = new Matrix<Int>($f->monomials_as_matrix);
   my $eval = ($fExponents) * $edgeDirection;
   my $min = minimum($eval);
   my @indices = grep{$eval->[$_] == $min}@{[0..($eval->dim -1)]};
   my $index = pop @indices;
   my $subtract = $fExponents->[$index];
   my @newExponents = map($_-$subtract, @$fExponents);
   @newExponents = map{
      my $i = 0;
      while(($i*$edgeDirection) != $_){$i++;}
      new Vector<Int>([$i])
   }@newExponents;
   return new Matrix<Int>(@newExponents);
}


sub get_edge_vector{
   my($f) = @_;
   my $fExponents = new Matrix<Int>($f->monomials_as_matrix);
   my $edgeDirection = primitive(new Vector($fExponents->[1] - $fExponents->[0]));
   return $edgeDirection;
}


sub find_bad_cones{
   my($f, $g) = @_;
   my $NDf = normal_fan(newton($f));
   my $dim = $NDf->AMBIENT_DIM;
   my @NDfMaxCones = map{
      my $rays = new Matrix($NDf->RAYS->minor($_, All));
      new Cone(INPUT_RAYS=>$rays)
   } @{$NDf->CONES->[$dim-2]};
   my $NDg = normal_fan(newton($g));
   my @NDgMaxCones = map{
      my $rays = new Matrix($NDg->RAYS->minor($_, All));
      new Cone(INPUT_RAYS=>$rays)
   } @{$NDg->CONES->[$dim-2]};
   my @result = ();
   foreach my $conef (@NDfMaxCones){
      foreach my $coneg (@NDgMaxCones){
         my $intersection = intersection($conef, $coneg);
         my $codim = $intersection->AMBIENT_DIM - $intersection->DIM;
         if($codim == 1){
            push @result, $intersection;
         }
      }
   }
   return @result;
}

# returns the initial form w.r.t. $w
sub get_face_polynomial{
   my($f, $w) = @_;
   my $R = $f->get_ring;
   my $fExponents = new Matrix<Int>($f->monomials_as_matrix);
   my $fCoefficients = $f->coefficients_as_vector;
   my $v = $fExponents * $w;
   my $fMax = minimum($v);
   # print $fMax," ",$f," ",$w,"\n";
   my @fMaxIndices = grep($fExponents->[$_]*$w == $fMax, 0..($fExponents->rows-1));
   # print @fMaxIndices,"\n";
   my $feExponents = $fExponents->minor([@fMaxIndices],All);
   $feExponents = new Matrix<Int>($feExponents);
   # print $feExponents,"\n";
   my @feCoefficients = @{$fCoefficients}[@fMaxIndices];
   my $feCoefficients = new Vector<Rational>(@feCoefficients);
   return new Polynomial($feExponents, $feCoefficients, $R);
}


# compute the tropical variety and a tropical basis
# according to algorithm I:
user_function tropvarproj(Ideal){
    my($I) = @_;

    # compute the dimension of I:
    my $R = $I->RING;
    my $sing = "ring R = 0,(" . join(",", $R->variables) . "),dp;\n";
    $sing .= "ideal I = " . join(",", @{$I->GENERATORS}) . ";\n";
    $sing .= "int d = dim(std(I));\n";

    #print $sing . "\n";

    singular_eval($sing);    
    my $d = new Int(singular_get_var("d"));

    print $d . "\n";

    my $r = $R->n_vars;    
    my @projs = get_coordinate_projections($r, $d);

    print @projs;
  
    my @F = @{$I->GENERATORS};
    my $count = 0;

    my $Sigma = tropical_prevariety(@F);

    while ($count < $r-$d || $Sigma->DIM > $d){

	print "count: $count, no of elements:" . @F . "\n";
	
	my $A = pop @projs;
	my ($h, $succ) = pushpull($I, $A);
	
	if($succ){
	    unshift @F, $h;
	    $count++;

	    $Sigma = intersect_fans($Sigma, tropical_hypersurface($h));
	}

	
    }
    
    return ($Sigma, new Ideal(GENERATORS=>\@F));
}


user_function isGeomReg(Matrix, PolyhedralFan){
    my ($A, $Sigma) = @_;

    $Sigma->LINEALITY_DIM == 0
	or die "Does not work for non-pointed fans at the moment.";
    
    # the image fan under A:
    my @maximalCones = maximal_cones_of_fan($Sigma);
    @maximalCones = map((new Cone(INPUT_RAYS=>$_->RAYS*transpose($A))), @maximalCones);
    my $projectedFan = check_fan_objects(@maximalCones);

    return 0 
	unless 
	$projectedFan && 
	$projectedFan->N_RAYS == $Sigma->N_RAYS &&
	$projectedFan->N_MAXIMAL_CONES == $Sigma->N_MAXIMAL_CONES;

    return 1;   
}


# compute the tropical variety and a tropical basis
# according to algorithm II:
user_function tropvarproj2(Ideal){
    my($I) = @_;

    # compute the dimension of I:
    my $R = $I->RING;
    my $sing = "ring R = 0,(" . join(",", $R->variables) . "),dp;\n";
    $sing .= "ideal I = " . join(",", @{$I->GENERATORS}) . ";\n";
    $sing .= "int d = dim(std(I));\n";

    singular_eval($sing);    
    my $d = new Int(singular_get_var("d"));
    my $r = $R->n_vars;    

    # compute the prevar
    my @F = @{$I->GENERATORS};
    my $Sigma = tropical_prevariety(@F);

    # refine it with the 'edge-killer' algorithm:
    if($d != $Sigma->DIM){
	my @LL = edgeKiller($Sigma, $I);
	$Sigma = $LL[0];
	my @G = @{$LL[1]};
	@F = @G;
    }

    # compute first allprojections
    # but choose only the Sigma-geom-regular ones:
    my @projs = get_coordinate_projections($r, $d);
    my $count = 0;

    while ($count < $r-$d || $Sigma->DIM > $d){

	print "count: $count, no of elements:" . @F . "\n";
	
	my $A = pop @projs;
	print @projs;
	print " " . @projs;
	print "in proj2: vor pushpull, A=, I=\n";
	print " " . $A;
	print $I->GENERATORS;
	
	my ($h, $succ) = pushpull($I, $A);
	
	if($succ && isGeomReg($A, $Sigma)){ # this condition is new in this version of the algo
	    unshift @F, $h;
	    $count++;

	    $Sigma = intersect_fans($Sigma, tropical_hypersurface($h));
	}
    }
    
    return ($Sigma, new Ideal(GENERATORS=>\@F));
}


user_function edgeKiller(PolyhedralFan, Ideal){
    my ($Sigma, $I) = @_;

    my @F = @{$I->GENERATORS};
    my $R = $I->RING;


    my @C = map(new Cloud(POLYNOMIAL=>$_), @F);
    my $i = 0;
    my $C1 = $C[$i];

    my $SigmaNew = $Sigma;
    
    for(my $k=1; $k<@C; ++$k){
	my $C2 = $C[$k];

	my $v = primitive(findParallelEdge($C1, $C2));

	if($v != zero_vector(42)){
	    my $C3 = step1($C1, $C2, $v);
	    my $h3 = cloud2poly_in_ring($C3, $R);
		
	    $SigmaNew = intersect_fans($SigmaNew, tropical_hypersurface($h3));
	    unshift @F, $h3;
	}
    }


    

    # TODO
    #warn "todo!";

    return ($SigmaNew, \@F);
}


user_function isNonnegMat(Matrix){
    my $A = shift @_;

    foreach (@$A){
	for(my $k=0; $k<$A->cols; ++$k){
	    return 0
		unless $_->[$k] >= 0;
	}
    }

    return 1;
}


# compute the pull-back of the push forward of the ideal 
# under the given matrix
user_function pushpull(Ideal, Matrix){
    my($I, $A) = @_;

    my $R = $I->RING;

    my @vars = $R->variables;
    my @inv = map($_ . "inv" , @vars);
    
    my @monomials = map(new Monomial((new Vector<Int>($_)), $R), @$A);
    
    
    # if A is nonnegative, then it suffices to work in the polynomial ring.
    # else: switch to laurent polynomial ring
    my $sing = "";
    if(isNonnegMat($A)){
	$sing .= "ring R = 0,(" . join(",", $R->variables) . "),dp;\n";
    } else {    
	$sing .= "ring R0 = 0,(" . join(",", $R->variables) . ", " . join(",", @inv) . "),dp;\n";
	$sing .= "ideal J = " ;

	for(my $k = 0; $k < @inv-1; $k++){
	    $sing .= $vars[$k] . "*" . $inv[$k] . "-1, ";
	}
	
	$sing .= $vars[@inv-1] . "*" . $inv[@inv-1] . "-1;\n";  
	$sing .= "qring R = std(J);\n";
    }
    
    $sing .= "ideal I = " . join(",", @{$I->GENERATORS}) . ";\n";
    $sing .= "ring S = 0,(T(1.." . $A->rows . ")),dp;\n";
    $sing .= "setring R;\n";
    $sing .= "map f = S, " . join(",", @monomials) .  ";\n";
    $sing .= "setring S;\n";
    $sing .= "ideal J = preimage(R, f, I);\n";
    $sing .= "poly g = J[1];\n";
    $sing .= "setring R;\n";
    $sing .= "poly h = f(g);\n";

    $sing =~ s/\^-([0-9]+)/inv\^$1/g;

    print $sing . "\n";
    
    singular_eval($sing);

    my $h = get_singular_poly("h", $R);

    # check whether J is principal:
    $sing = "setring S;\n";
    $sing .= "int n = size(J);\n";
    $sing .= "kill R;\n";

    singular_eval($sing);

    my $n = singular_get_var("n");

    $n == 1
	or warn "Ideal is not principal. Is the projection geometrically regular?";
    
    #print $h . "\n";
    #print $sing . "\n";
    #print join(",", @monomials), "\n";

    return ($h, $n==1);
}



# compute the pull-back of the push forward of the ideal 
# under the given matrix
user_function pushpullOLD(Ideal, Matrix){
    my($I, $A) = @_;

    my $R = $I->RING;
    my @monomials = map(new Monomial((new Vector<Int>($_)), $R), @$A);
    my $sing = "ring R = 0,(" . join(",", $R->variables) . "),dp;\n";
    $sing .= "ideal I = " . join(",", @{$I->GENERATORS}) . ";\n";
    $sing .= "ring S = 0,(T(1.." . $A->rows . ")),dp;\n";
    $sing .= "setring R;\n";
    $sing .= "map f = S, " . join(",", @monomials) .  ";\n";
    $sing .= "setring S;\n";
    $sing .= "ideal J = preimage(R, f, I);\n";
    $sing .= "poly g = J[1];\n";
    $sing .= "setring R;\n";
    $sing .= "poly h = f(g);\n";

    print $sing . "\n";
    
    singular_eval($sing);

    my $h = get_singular_poly("h", $R);

    # check whether J is principal:
    $sing = "setring S;\n";
    $sing .= "int n = size(J);\n";

    singular_eval($sing);

    my $n = singular_get_var("n");

    $n == 1
	or warn "Ideal is not principal. Is the projection geometrically regular?";
    
    #print $h . "\n";
    #print $sing . "\n";
    #print join(",", @monomials), "\n";

    return ($h, $n==1);
}


user_function random_non_tropical_basis( Ring ){
   my($R) = @_;
   my $root = new Vector(0,0,0);
   my $e1 = new Vector(2,0,0);
   my $e2 = new Vector(5,0,0);
   my $f = random_polynomial_with_edge($root, $e1, $R, 2, 2);
   my $g = random_polynomial_with_edge($root, $e2, $R, 2, 2);
   if(check_prime_with_M2($R, $f, $g)){
      print "This ideal is prime.\n";
      my $I = new Ideal(GENERATORS=>[$f, $g]);
      my $GI = gfan_tropicalbasis($I);
      if($I->GENERATORS == $GI->GENERATORS){
         print "Ideal is tropical basis.\n";
         return random_non_tropical_basis($R);
      } else {
         print "Ideal is not tropical basis.\n";
         return ($I, $GI);
      }
   } else {
      print "Ideal was not prime.\n";
      return random_non_tropical_basis($R);
   }
}


user_function random_non_tropical_basis_higher_dimension(Ring){
   my($R) = @_;
   warn "We will not deliver the tropical basis, only for three dimensionals.";
   my $RDim = $R->n_vars();
   $RDim > 2 or die "No non-trivial things here, dear friend.";
   $RDim > 3 or return random_non_tropical_basis($R);
   my $start = 0;
   my $end = 5;
   my $root = zero_vector<Int>($R->n_vars);
   my $top = $end * ones_vector<Int>($R->n_vars);
   my $f1 = new Monomial($root, $R);
   my $f2 = new Monomial($top, $R);
   my $g1 = new Monomial($root, $R);
   my $g2 = new Monomial($top, $R);
   for(my $i = 0; $i<$R->n_vars; $i++){
      $f1 = $f1 + int(rand(3)) * (new Monomial((2 * unit_vector<Int>($R->n_vars, $i)), $R));
      $g1 = $g1 + int(rand(3)) * (new Monomial((5 * unit_vector<Int>($R->n_vars, $i)), $R));
      $f2 = $f2 + int(rand(3)) * (new Monomial($top - (2 * unit_vector<Int>($R->n_vars, $i)), $R));
      $g2 = $g2 + int(rand(3)) * (new Monomial($top - (5 * unit_vector<Int>($R->n_vars, $i)), $R));
   }
   my $f = $f1+$f2+random_box_polynomial($start, $end, $R);
   my $g = $g1+$g2+random_box_polynomial($start, $end, $R);
   return new Ideal(GENERATORS=>[$f, $g]);
   # print "Prime check.\n";
   # if(check_prime_with_M2($R, $f, $g)){
   #    return new Ideal(GENERATORS=>[$f, $g]);
   # } else {
   #    print "Ideal not prime.\n";
   # }
   
}

sub random_box_polynomial{
   my($start, $end, $ring) = @_;
   my $numpoints = int(rand($ring->n_vars))+3;
   print "Numpoints: ",$numpoints,"\n";
   my $coeffs = random_box_point(-2,2,$numpoints);
   $coeffs = new Vector(map($_ == 0 ? 1:$_ , @$coeffs));
   my @exponents = ();
   while($numpoints > 0){
      push @exponents, random_box_point($start, $end, $ring->n_vars);
      $numpoints--;
   }
   my $exponents = new Matrix<Int>(@exponents);
   # print "Exponents:\n",$exponents,"\nCoeffs\n",$coeffs,"\n\n";
   return new Polynomial($exponents, $coeffs, $ring);
}

sub random_box_point{
   my($start, $end, $dim) = @_;
   my $counter = 0;
   my @result = ();
   while($counter < $dim){
      my $entry = int(rand($end-$start))+$start;
      push @result, $entry;
      $counter++;
   }
   return new Vector(@result);
}



user_function get_coordinate_projections($ , $ ){
   my($n, $d) = @_;
   my @subsets = all_subsets_of_k($d+1, 0..($n-1));
   return map{
      my @subset = @$_;
      new Matrix(map(unit_vector($n, $_), @subset));
   }@subsets;
}

sub check_prime_with_M2{
   my($R, $f, $g) = @_;
   my $m2string = "R = QQ[".join(",",$R->variables)."];\n";
   $m2string .= "f = ".$f.";\n";
   $m2string .= "g = ".$g.";\n";
   $m2string .= "i = ideal(f,g);\n";
   $m2string .= "isPrime i\n";
   print $m2string;
   my $tempfile=new Tempfile;
   open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
   print $input $m2string;
   close $input;

   system("nohup M2 --silent --stop --no-prompts < $tempfile.in >\& $tempfile.out");
   open(FILE, $tempfile.".out") or die "Can't read file '$tempfile.out' [$!]\n";
   local $/;
   my $content = <FILE>;
   close (FILE);
   print "Teh content is\n",$content,"\n";
   my( $answer) = $content =~ m/o5 = (.*)$/m;
   print "Answer:\n",$answer,"\n";
   return $answer =~ m/true/;
}

sub random_polynomial_with_edge{
   my($a, $b, $R, $additionalMonomials, $boxSize) = @_;
   my $exponents = new Matrix<Int>(dense(random_vertices_at_points($a, $b, $additionalMonomials, $boxSize)));
   return new Polynomial($exponents, ones_vector($exponents->rows), $R);
}

sub random_vertices_at_points{
   my($a, $b, $additionalMonomials, $boxSize) = @_;
   my $dim = $a->dim;
   my $bottom = rand_box($dim,$boxSize,$additionalMonomials)->VERTICES->minor(All,~[0]);
   my $top = rand_box($dim,$boxSize,$additionalMonomials)->VERTICES->minor(All,~[0]);
   $bottom = new Matrix(map($_+$a, @$bottom));
   $bottom = $bottom/$a;
   $top = new Matrix(map($_+$a, @$top));
   $top = $top/$b;
   return $top/$bottom;
}

user_function is_tropical_basis(Ideal){
   my($I) = @_;
   my $tbI = gfan_tropicalbasis($I);
   return ($tbI->GENERATORS == $I->GENERATORS)
}

user_function gfan_tropicalbasis(Ideal ){
   my($I) = @_;
   my $tempfile=new Tempfile;
   #my $tempfile="test";

   my $R = $I->RING;

   # Writing data to file:
   open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
   print $input "Q[";
   print $input join(",",$R->variables);
   print $input "]{\n";
   print $input join(",",@{$I->GENERATORS});
   print $input "\n}";
   close $input;

   # Accessing gfan:
   # FIXME: Since we homogenize, we need to dehomogenize later!
   system "(gfan_tropicalbasis -h <$tempfile.in) >$tempfile.out 2>/dev/null";
   open(FILE, $tempfile.".out") or die "Can't read file '$tempfile.out' [$!]\n";
   local $/;
   my $content = <FILE>;
   close (FILE);
   my($polys) = $content =~ m/\{(.*)\}/s;
   my @polys = split(",",$polys);
   @polys = map((new Polynomial($R, $_)),@polys);
   return new Ideal(GENERATORS=>\@polys);
}


user_function eliminate_edge(Polynomial, Polynomial, Vector){
   # $f has longer edge, we use $g to eliminate.
   my($f,$g,$w) = @_;
   my $R = $f->get_ring;
   print "Height before: ",maximum(newton($f)->VERTICES->minor(All,~[0])*$w),"\n";
   my $fe = get_face_polynomial($f, $w);
   my $ge = get_face_polynomial($g, $w);
   print "fe: ",$fe," ge: ",$ge,"\n";
   my $gcd = singular_gcd($fe,$ge);
   print $gcd,"\n";
   if($gcd->monomials_as_matrix->rows == 1){
      print "We were already done.\n";
   }
   my $a = divide_polys($fe, $gcd);
   my $b = divide_polys($ge, $gcd);
   my $result = $b*$f-$a*$g;
   print "Height after: ",maximum(newton($result)->VERTICES->minor(All,~[0])*$w),"\n";
   return $result;
}

sub divide_polys{
   my($f, $g) = @_;
   my $R = $f->get_ring;
   singular_eval("ring r =0,(".join(",",$R->variables)."),dp;");
   singular_eval("poly f = ".$f.";");
   singular_eval("poly g = ".$g.";");
   singular_eval("poly k = f/g;");
   return get_singular_poly("k", $R);
}


sub get_singular_poly{
   my($name, $ring) = @_;
   my @a = singular_get_var($name);
   return new Polynomial($a[0],$a[1], $ring);
}

user_function singular_gcd( $ , $ ){
   my($f, $g) = @_;
   my $R = $f->get_ring;
   singular_eval("ring r =0,(".join(",",$R->variables)."),dp;");
   singular_eval("poly f = ".$f.";");
   singular_eval("poly g = ".$g.";");
   singular_eval("poly k = gcd(f,g);");
   return get_singular_poly("k", $R);
}







declare object Cloud{

   property POLYNOMIAL : Polynomial;

   property EXPONENTS : Matrix<Integer>;

   property COEFFICIENTS : Map<Vector<Integer>, Rational>;

   property POLYTOPE : Polytope;

   property TROPICAL_VARIETY : PolyhedralFan;

   rule EXPONENTS : COEFFICIENTS {
      $this->EXPONENTS = new Matrix<Integer>(keys %{$this->COEFFICIENTS});
   }

   rule TROPICAL_VARIETY : POLYTOPE {
      my $f = normal_fan($this->POLYTOPE);
      $this->TROPICAL_VARIETY = check_fan($f->RAYS,$f->CONES->[$f->DIM-2]);
   }

   rule POLYTOPE : EXPONENTS {
      $this->POLYTOPE = new Polytope(POINTS=>ones_vector | new Matrix<Rational>($this->EXPONENTS));
   }

   rule EXPONENTS, COEFFICIENTS : POLYNOMIAL {
      $this->EXPONENTS = new Matrix<Integer>($this->POLYNOMIAL->monomials_as_matrix);
      my $coeff_vec = $this->POLYNOMIAL->coefficients_as_vector;
      my $coeff = new Map<Vector<Integer>, Rational>();
      for(my $i=0; $i<$coeff_vec->dim; $i++){
         $coeff->{$this->EXPONENTS->[$i]}=$coeff_vec->[$i];
      }
      $this->COEFFICIENTS = $coeff;
   }

   user_method coefficients_as_vector(){
      my($this) = @_;
      my $EXP = $this->EXPONENTS;
      my $COEFF = $this->COEFFICIENTS;
      my @result = ();
      foreach my $v (@$EXP){
         push @result, $COEFF->{$v};
      }
      return new Vector<Rational>(@result);
   }

}


# user_function face_approach(Vector, @){
#    # We do this for two polynomials only at first:
#    my($w, $f, $g) = @_;
#    
# }
# 
user_function face_approach_step(Vector, Cloud, @){
   my($w, $g, @reductors) = @_;
   my $face_cloud_g = maxCloudPoints($g,$w);
   # print $face_cloud_g,"\n";
   my $face_g = cloud2Polytope($face_cloud_g);
   my $lattice_map = new Map<Vector<Integer>, Int>();
   my $i = 0;
   map{$lattice_map->{$_->slice(1)}=$i; $i++;}@{$face_g->LATTICE_POINTS};
   my $dim = $i;
   # print $lattice_map,"\n";

   my @matrix = ();
   my $first = new Vector<Rational>($dim);
   foreach my $key (keys %$face_cloud_g){
      $first->[$lattice_map->{$key}] = $face_cloud_g->{$key};
   }
   push @matrix, $first;
   # print "Made it to here.\n";
   $i = 0;
   my @shift_map = ();
   foreach my $f (@reductors){
      my $face_cloud_f = maxCloudPoints($f,$w);
      # print $face_cloud_f,"\n";
      my $face_f = cloud2Polytope($face_cloud_f);
      my $shifts_f = shifts_inside($face_g, $face_f);
      if($shifts_f->rows > 0){
         print "This fits!\n";
         # print $shifts_f;
         foreach my $s (@$shifts_f){
            $first = new Vector($dim);
            foreach my $key (keys %$face_cloud_f){
               $first->[$lattice_map->{$key+$s}] = $face_cloud_f->{$key};
            }
            push @matrix, $first;
            push @shift_map, new Vector($i, @$s);
         }

      }
      $i++;
   }
   
   print new Matrix(@matrix);
   print new Matrix(@shift_map);
   # Now do matroid stuff!

   my $A = new Matrix(@matrix);
   my $matroid = new Matroid(POINTS=>(ones_vector | $A));
   print $matroid->CIRCUITS;
}

user_function shifts_inside(Polytope, Polytope){
   my($p, $q) = @_;
   print $p->VERTICES;
   print $q->VERTICES;
   # Move $q inside of $p!
   my $Apf = $p->FACETS;
   my $Ap = $Apf->minor(All, ~[0]);
   my $bp = $Apf->col(0);
   my $coll_ineq = new Matrix(0,$Apf->cols);
   foreach my $v (@{$q->VERTICES}){
      my $eval = $Ap*($v->slice(1));
      $coll_ineq = $coll_ineq / ($bp+$eval | $Ap);
   }
   
   my $coll_eq = new Matrix(0,$Apf->cols);
   my $Epf = $p->AFFINE_HULL;
   if($Epf->rows > 0){
      my $Ep = $Epf->minor(All, ~[0]);
      my $cp = $Epf->col(0);
      foreach my $v (@{$q->VERTICES}){
         my $eval = $Ep*($v->slice(1));
         $coll_eq = $coll_eq / ($cp+$eval | $Ep);
      }
   }
   my $sp = new Polytope(INEQUALITIES=>$coll_ineq, EQUATIONS=>$coll_eq);
   return (new Matrix($sp->LATTICE_POINTS->minor(All,~[0])));#->minor(All,~[0]));
   # print $collected;
}

user_function tropical_hypersurface(Polynomial ){
   my($f) = @_;
   my $fan = normal_fan(newton($f));
   my @codim1Cones = ();
   my $lineality = $fan->LINEALITY_SPACE;
   if($fan->CONES->size > 1){
      my $rays = $fan->RAYS;
      @codim1Cones = @{$fan->CONES->[$fan->CONES->size-2]};
      return new PolyhedralFan(INPUT_RAYS=>$rays, INPUT_CONES=>\@codim1Cones, INPUT_LINEALITY=>$lineality);
   } else {
      return new PolyhedralFan(INPUT_RAYS=>zero_matrix(0,$lineality->rows), INPUT_CONES=>[[]], INPUT_LINEALITY=>$lineality);
   }
}

user_function intersect_fans( @ ){
   my(@fans) = @_;
   my $n = @fans;
   $n > 0 or die "Empty list of fans.$!";
   if($n == 1){
      return pop @fans;
   } else {
      my $f1 = pop @fans;
      my $f2 = intersect_fans(@fans);
      my @f1Cones = maximal_cones_of_fan($f1);
      my @f2Cones = maximal_cones_of_fan($f2);
      my @resultCones = ();
      my $lineality = 0;
      foreach my $c1 (@f1Cones){
         foreach my $c2 (@f2Cones){
            my $intersection = intersection($c1, $c2);
            $intersection->POINTED or $lineality = 1;
            if($intersection->DIM > 0){
               push @resultCones, $intersection;
            }
         }
      }
      print "Intersections done.\n";
      $lineality == 0 or return check_fan_objects(@resultCones);
      my $rays = unique_rays(@resultCones);
      my @cones = ray_indices($rays, @resultCones);
      return new PolyhedralFan(INPUT_RAYS=>$rays, INPUT_CONES=>\@cones);
   }
}

sub ray_indices{
   my($rays, @cones) = @_;
   my @result = ();
   foreach my $cone (@cones){
      my @indices = ();
      foreach my $ray (@{$cone->RAYS}){
         @indices = (@indices, grep($rays->[$_] == $ray, 0..$rays->rows-1));
      }
      push @result, new Set<Int>(@indices);
   }
   # print "Indices done.\n";
   return @result;
}

sub unique_rays{
   my(@cones) = @_;
   my @result = ();
   foreach my $cone (@cones){
      foreach my $ray (@{$cone->RAYS}){
         my $s = grep($_ == $ray, @result);
         $s > 0 or push @result, $ray;
      }
   }
   # print "Rays done.\n";
   return new Matrix(@result);
}

sub maximal_cones_of_fan{
   my($fan) = @_;
   my @mc = @{$fan->MAXIMAL_CONES};
   my $rays = $fan->RAYS;
   my $lineality = $fan->LINEALITY_SPACE;
   @mc = map($rays->minor($_,All), @mc);
   @mc = map(new Cone(INPUT_RAYS=>$_, LINEALITY_SPACE=>$lineality), @mc);
   return @mc;
}

user_function tropical_prevariety(@){
   my(@a) = @_;
   my @hypersurfaces = map(tropical_hypersurface($_), @a);
   return intersect_fans(@hypersurfaces);
}

user_function findParallelEdge(Cloud, Cloud){
   my($g, $f) = @_;
   my $Pg = $g->POLYTOPE;
   my $Pf = $f->POLYTOPE;
   # print "V:\n",$Pg->VERTICES;
   # print "F:\n",$Pg->FACETS;
   my $edges_g = $Pg->GRAPH->EDGES;
   my $edges_f = $Pf->GRAPH->EDGES;
   # print $edges_g,"\n";
   my $ftv_g = $Pg->FACETS_THRU_VERTICES;
   my $ftv_f = $Pf->FACETS_THRU_VERTICES;
   # print $ftv_g;
   my @edges_g = map(($ftv_g->[$_->[0]]) * ($ftv_g->[$_->[1]]), @$edges_g);
   my @edges_f = map(($ftv_f->[$_->[0]]) * ($ftv_f->[$_->[1]]), @$edges_f);
   
   @edges_g = map((new Cone(INPUT_RAYS=>$Pg->FACETS->minor($_,~[0]))), @edges_g);
   @edges_f = map((new Cone(INPUT_RAYS=>$Pf->FACETS->minor($_,~[0]))), @edges_f);
  
   my $gcounter = 0;
   foreach my $cg (@edges_g){
      my $fcounter = 0;
      foreach my $cf (@edges_f){
         my $intersection = intersection($cg, $cf);
         if($intersection->DIM == $intersection->AMBIENT_DIM-1){
            my $candidate = new Vector($intersection->REL_INT_POINT);
            my $gft = grep($_*$candidate == 0, @{$cg->FACETS});
            my $fft = grep($_*$candidate == 0, @{$cf->FACETS});
            # # print "candidate: ",$candidate,"\n";
            # print "Pair: ",$gcounter," ",$fcounter," ",$gft+$fft,".\n";
            # # print "Dims: ",$cg->DIM," ",$cf->DIM,"\n";
            # # print $cg->FACETS,"\n",$cf->FACETS;
            # print $Pg->GRAPH->EDGE_DIRECTIONS->[$gcounter],"\n";
            # print $Pf->GRAPH->EDGE_DIRECTIONS->[$fcounter],"\n";
            if($gft + $fft == 0){
               print "THESE WERE PARALLEL!\n";
               return -$intersection->REL_INT_POINT;
            }
         }
         $fcounter++;
      }
      $gcounter++;
   }
   print "NO PARALLELS!";
   return zero_vector(42);
}

user_function checkWGFan(@){
   my(@a) = @_;
   my $b = "abcdefghijklmnop";
   my $gfan_input="Q[";
   my $n = (keys %{$a[0]})[0]->dim;
   $gfan_input .= join(",", split(//,substr($b,0,$n)));
   $gfan_input .= "]\{\n";
   foreach my $f (@a){
      $gfan_input .= cloud2Polynomial($f,$b).",\n";
   }
   $gfan_input .= "0\n\}";
   print $gfan_input,"\n";
   
   my $tempfile=new Tempfile;
   # Writing data to file:
   open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
   print $input $gfan_input;
   close $input;
   # Executing gfan:
   system("gfan_homogenize -i -H < $tempfile.in | gfan_buchberger | gfan_tropicalstartingcone | gfan_tropicaltraverse --xml > $tempfile.out");
   return User::load("$tempfile.out");
}


user_function cloud2Polynomial(Cloud){
   my($C) = @_;

   my $n = $C->EXPONENTS->cols;
   my $R = new Ring($n);
   
   return cloud2poly_in_ring($C, $R);
}

sub cloud2poly_in_ring {
    my ($C, $R) = @_;
    my $Ex = $C->EXPONENTS;
    my $Coef = new Vector(map($C->COEFFICIENTS->{$_}, @$Ex));

    return new Polynomial((new Matrix<Int>($Ex)), $Coef, $R);
}



user_function step1(Cloud, Cloud, Vector<Integer>){
   my($g, $f, $v) = @_;
   my $edge_f = maxCloudPoints($f, $v);
   my $edge_g = maxCloudPoints($g, $v);
   #print "f: ",$edge_f,"\n";
   #print "g: ",$edge_g,"\n";
   my $first_f = new Vector<Integer>($v->dim);
   my $first_g = new Vector<Integer>($v->dim);
   foreach my $key (keys %{$edge_f->COEFFICIENTS}){
      if(lex($key, $first_f)){
         $first_f = $key;
      }
   }
   foreach my $key (keys %{$edge_g->COEFFICIENTS}){
      if(lex($key, $first_g)){
         $first_g = $key;
      }
   }
   my $factor = -$g->COEFFICIENTS->{$first_g}/$f->COEFFICIENTS->{$first_f};
   my $shift = $first_g - $first_f;
   #print "Shift: ",$shift,"\n";
   my $summand = shiftCloud($f, $shift);
   $summand = multCloud($summand, $factor);
   # print $summand,"\n";
   return addClouds($g, $summand);
}

user_function lex(Vector, Vector){
   my($a, $b) = @_;
   my $t = $a-$b;
   my $i = 0;
   while(($t->[$i] == 0) && ($i < $a->dim-1)){
      $i++;
   }
   return ($t->[$i] > 0);
}

user_function addClouds(Cloud, Cloud){
   my($a, $b) = @_;
   $a->EXPONENTS->cols == $b->EXPONENTS->cols or die "Incompatible dimensions.";
   my $R = new Ring($a->EXPONENTS->cols);
   my $apoly = cloud2poly_in_ring($a, $R);
   my $bpoly = cloud2poly_in_ring($b, $R);
   return new Cloud(POLYNOMIAL=>($apoly + $bpoly));
}

user_function shiftCloud(Cloud, Vector<Integer>){
   my($a, $b) = @_;
   my $result = new Map<Vector<Integer>, Rational>();
   foreach my $key (@{$a->EXPONENTS}){
      $result->{$key+$b} = $a->COEFFICIENTS->{$key};
   }
   return new Cloud(COEFFICIENTS=>$result);
}

user_function multCloud(Cloud, $ ){
   my($a, $b) = @_;
   my $R = new Ring($a->EXPONENTS->cols);
   my $apoly = cloud2poly_in_ring($a, $R);
   return new Cloud(POLYNOMIAL=>($b * $apoly));
}

user_function maxCloudValue(Cloud, Vector){
   my($a, $b) = @_;
   my $result = 0;
   foreach my $key (@{$a->EXPONENTS}){
       $result = maximum([$result, $key*$b]);
   }
   return $result;
}

user_function maxCloudPoints(Cloud, Vector<Integer>){
   my($a, $b) = @_;
   my $value = maxCloudValue($a, $b);
   my $result = new Map<Vector<Integer>, Rational>();
   foreach my $key (@{$a->EXPONENTS}){
      if($value == $key*$b){
         $result->{$key} = $a->COEFFICIENTS->{$key};
      };
   }
   return new Cloud(COEFFICIENTS=>$result);
}

user_function cleanup(Map<Vector<Integer>, Rational>){
   my($a) = @_;
   my $result = new Map<Vector<Integer>, Rational>();
   foreach my $key (keys %$a){
      if($a->{$key} != 0){
         $result->{$key} = $a->{$key};
      }
   }
   return $result;
}
