user_function random_non_tropical_basis( Ring ){
   my($R) = @_;
   my $root = new Vector(0,0,0);
   my $e1 = new Vector(2,0,0);
   my $e2 = new Vector(5,0,0);
   my $f = random_polynomial_with_edge($root, $e1, $R);
   my $g = random_polynomial_with_edge($root, $e2, $R);
   if(check_prime_with_M2($R, $f, $g)){
      print "This ideal is prime.\n";
   }
   return new Ideal(GENERATORS=>[$f, $g]);
}

sub check_prime_with_M2{
   my($R, $f, $g) = @_;
   my $m2string = "R = QQ[".join(",",$R->variables)."];\n";
   $m2string .= "f = ".$f.";\n";
   $m2string .= "g = ".$g.";\n";
   $m2string .= "i = ideal(f,g);\n";
   $m2string .= "isPrime i\n";
   print $m2string;
   my $tempfile=new Tempfile;
   open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
   print $input $m2string;
   close $input;

   system("nohup M2 --silent --stop --no-prompts < $tempfile.in >\& $tempfile.out");
   open(FILE, $tempfile.".out") or die "Can't read file '$tempfile.out' [$!]\n";
   local $/;
   my $content = <FILE>;
   close (FILE);
   print "Teh content is\n",$content,"\n";
   my( $answer) = $content =~ m/o5 = (.*)$/m;
   print "Answer:\n",$answer,"\n";
   return $answer =~ m/true/;
}

sub random_polynomial_with_edge{
   my($a, $b, $R) = @_;
   my $exponents = new Matrix<Int>(dense(random_vertices_at_points($a, $b)));
   return new Polynomial($exponents, ones_vector($exponents->rows), $R);
}

sub random_vertices_at_points{
   my($a, $b) = @_;
   my $bottom = rand_box(3,2,1)->VERTICES->minor(All,~[0]);
   my $top = rand_box(3,2,1)->VERTICES->minor(All,~[0]);
   my $bottom = new Matrix(map($_+$a, @$bottom));
   $bottom = $bottom/$a;
   my $top = new Matrix(map($_+$a, @$top));
   $top = $top/$b;
   return $top/$bottom;
}

user_function is_tropical_basis(Ideal){
   my($I) = @_;
   my $tbI = gfan_tropicalbasis($I);
   return ($tbI->GENERATORS == $I->GENERATORS)
}

user_function gfan_tropicalbasis(Ideal ){
   my($I) = @_;
   my $tempfile=new Tempfile;
   #my $tempfile="test";

   my $R = $I->RING;

   # Writing data to file:
   open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
   print $input "Q[";
   print $input join(",",$R->variables);
   print $input "]{\n";
   print $input join(",",@{$I->GENERATORS});
   print $input "\n}";
   close $input;

   # Accessing gfan:
   # FIXME: Since we homogenize, we need to dehomogenize later!
   system "(gfan_tropicalbasis -h <$tempfile.in) >$tempfile.out 2>/dev/null";
   open(FILE, $tempfile.".out") or die "Can't read file '$tempfile.out' [$!]\n";
   local $/;
   my $content = <FILE>;
   close (FILE);
   my($polys) = $content =~ m/\{(.*)\}/s;
   my @polys = split(",",$polys);
   @polys = map((new Polynomial($R, $_)),@polys);
   return new Ideal(GENERATORS=>\@polys);
}


user_function eliminate_edge(Polynomial, Polynomial, Vector){
   # $f has longer edge, we use $g to eliminate.
   my($f,$g,$w) = @_;
   my $R = $f->get_ring;
   print "Height before: ",maximum(newton($f)->VERTICES->minor(All,~[0])*$w),"\n";
   my $fe = get_face_polynomial($f, $w);
   my $ge = get_face_polynomial($g, $w);
   print "fe: ",$fe," ge: ",$ge,"\n";
   my $gcd = singular_gcd($fe,$ge);
   print $gcd,"\n";
   if($gcd->monomials_as_matrix->rows == 1){
      print "We were already done.\n";
   }
   my $a = divide_polys($fe, $gcd);
   my $b = divide_polys($ge, $gcd);
   my $result = $b*$f-$a*$g;
   print "Height after: ",maximum(newton($result)->VERTICES->minor(All,~[0])*$w),"\n";
   return $result;
}
sub divide_polys{
   my($f, $g) = @_;
   my $R = $f->get_ring;
   singular_eval("ring r =0,(".join(",",$R->variables)."),dp;");
   singular_eval("poly f = ".$f.";");
   singular_eval("poly g = ".$g.";");
   singular_eval("poly k = f/g;");
   return get_singular_poly("k", $R);
}

sub get_face_polynomial{
   my($f, $w) = @_;
   my $R = $f->get_ring;
   my $fExponents = new Matrix<Int>($f->monomials_as_matrix);
   my $fCoefficients = $f->coefficients_as_vector;
   my $v = $fExponents * $w;
   my $fMax = maximum($v);
   print $fMax," ",$f," ",$w,"\n";
   my @fMaxIndices = grep($fExponents->[$_]*$w == $fMax, 0..($fExponents->rows-1));
   # print @fMaxIndices,"\n";
   my $feExponents = $fExponents->minor([@fMaxIndices],All);
   $feExponents = new Matrix<Int>($feExponents);
   # print $feExponents,"\n";
   my @feCoefficients = @{$fCoefficients}[@fMaxIndices];
   my $feCoefficients = new Vector<Rational>(@feCoefficients);
   return new Polynomial($feExponents, $feCoefficients, $R);
}

sub get_singular_poly{
   my($name, $ring) = @_;
   singular_eval("int n = size(".$name.")");
   my $numTerms = singular_get_var("n");
   my $numVars = $ring->n_vars;
   my $exponents = new Matrix<Integer>(0, $numVars);
   my $coefficients = new Vector<Rational>();
   print "NumTerms: ";
   while($numTerms > 0){
      singular_eval("intvec exponent = leadexp(".$name.");");
      singular_eval("int num = int(numerator(leadcoef(".$name.")));");
      singular_eval("int den = int(denominator(leadcoef(".$name.")));");
      my $exponent = singular_get_var("exponent");
      my $coefficient = new Rational(singular_get_var("num"),singular_get_var("den"));
      $exponents = $exponents/$exponent;
      $coefficients = $coefficients|$coefficient;
      singular_eval($name." = ".$name."-lead(".$name.");");
      singular_eval("int n = size(".$name.")");
      $numTerms = singular_get_var("n");
      print $numTerms,",";
   }
   print "\n";
   return new Polynomial((new Matrix<Int>($exponents)),$coefficients, $ring);

}

user_function singular_gcd( $ , $ ){
   my($f, $g) = @_;
   my $R = $f->get_ring;
   singular_eval("ring r =0,(".join(",",$R->variables)."),dp;");
   singular_eval("poly f = ".$f.";");
   singular_eval("poly g = ".$g.";");
   singular_eval("poly k = gcd(f,g);");
   return get_singular_poly("k", $R);
}

declare object Cloud{

   property POLYNOMIAL : Polynomial;

   property EXPONENTS : Matrix<Integer>;

   property COEFFICIENTS : Map<Vector<Integer>, Rational>;

   property POLYTOPE : Polytope;

   property TROPICAL_VARIETY : PolyhedralFan;

   rule EXPONENTS : COEFFICIENTS {
      $this->EXPONENTS = new Matrix<Integer>(keys %{$this->COEFFICIENTS});
   }

   rule TROPICAL_VARIETY : POLYTOPE {
      my $f = normal_fan($this->POLYTOPE);
      $this->TROPICAL_VARIETY = check_fan($f->RAYS,$f->CONES->[$f->DIM-2]);
   }

   rule POLYTOPE : EXPONENTS {
      $this->POLYTOPE = new Polytope(POINTS=>ones_vector | new Matrix<Rational>($this->EXPONENTS));
   }

   rule EXPONENTS, COEFFICIENTS : POLYNOMIAL {
      $this->EXPONENTS = new Matrix<Integer>($this->POLYNOMIAL->monomials_as_matrix);
      my $coeff_vec = $this->POLYNOMIAL->coefficients_as_vector;
      my $coeff = new Map<Vector<Integer>, Rational>();
      for(my $i=0; $i<$coeff_vec->dim; $i++){
         $coeff->{$this->EXPONENTS->[$i]}=$coeff_vec->[$i];
      }
      $this->COEFFICIENTS = $coeff;
   }

   user_method coefficients_as_vector(){
      my($this) = @_;
      my $EXP = $this->EXPONENTS;
      my $COEFF = $this->COEFFICIENTS;
      my @result = ();
      foreach my $v (@$EXP){
         push @result, $COEFF->{$v};
      }
      return new Vector<Rational>(@result);
   }

}


# user_function face_approach(Vector, @){
#    # We do this for two polynomials only at first:
#    my($w, $f, $g) = @_;
#    
# }
# 
user_function face_approach_step(Vector, Cloud, @){
   my($w, $g, @reductors) = @_;
   my $face_cloud_g = maxCloudPoints($g,$w);
   # print $face_cloud_g,"\n";
   my $face_g = cloud2Polytope($face_cloud_g);
   my $lattice_map = new Map<Vector<Integer>, Int>();
   my $i = 0;
   map{$lattice_map->{$_->slice(1)}=$i; $i++;}@{$face_g->LATTICE_POINTS};
   my $dim = $i;
   # print $lattice_map,"\n";

   my @matrix = ();
   my $first = new Vector<Rational>($dim);
   foreach my $key (keys %$face_cloud_g){
      $first->[$lattice_map->{$key}] = $face_cloud_g->{$key};
   }
   push @matrix, $first;
   # print "Made it to here.\n";
   $i = 0;
   my @shift_map = ();
   foreach my $f (@reductors){
      my $face_cloud_f = maxCloudPoints($f,$w);
      # print $face_cloud_f,"\n";
      my $face_f = cloud2Polytope($face_cloud_f);
      my $shifts_f = shifts_inside($face_g, $face_f);
      if($shifts_f->rows > 0){
         print "This fits!\n";
         # print $shifts_f;
         foreach my $s (@$shifts_f){
            $first = new Vector($dim);
            foreach my $key (keys %$face_cloud_f){
               $first->[$lattice_map->{$key+$s}] = $face_cloud_f->{$key};
            }
            push @matrix, $first;
            push @shift_map, new Vector($i, @$s);
         }

      }
      $i++;
   }
   
   print new Matrix(@matrix);
   print new Matrix(@shift_map);
   # Now do matroid stuff!

   my $A = new Matrix(@matrix);
   my $matroid = new Matroid(POINTS=>(ones_vector | $A));
   print $matroid->CIRCUITS;
}

user_function shifts_inside(Polytope, Polytope){
   my($p, $q) = @_;
   print $p->VERTICES;
   print $q->VERTICES;
   # Move $q inside of $p!
   my $Apf = $p->FACETS;
   my $Ap = $Apf->minor(All, ~[0]);
   my $bp = $Apf->col(0);
   my $coll_ineq = new Matrix(0,$Apf->cols);
   foreach my $v (@{$q->VERTICES}){
      my $eval = $Ap*($v->slice(1));
      $coll_ineq = $coll_ineq / ($bp+$eval | $Ap);
   }
   
   my $coll_eq = new Matrix(0,$Apf->cols);
   my $Epf = $p->AFFINE_HULL;
   if($Epf->rows > 0){
      my $Ep = $Epf->minor(All, ~[0]);
      my $cp = $Epf->col(0);
      foreach my $v (@{$q->VERTICES}){
         my $eval = $Ep*($v->slice(1));
         $coll_eq = $coll_eq / ($cp+$eval | $Ep);
      }
   }
   my $sp = new Polytope(INEQUALITIES=>$coll_ineq, EQUATIONS=>$coll_eq);
   return (new Matrix($sp->LATTICE_POINTS->minor(All,~[0])));#->minor(All,~[0]));
   # print $collected;
}

user_function tropPreVar(@){
   my(@a) = @_;
   @coll = map($_->TROPICAL_VARIETY,@coll);
   @coll = map(check_fan($_->RAYS,$_->CONES->[$_->DIM-2]),@coll);
   my $result = pop @coll;
   my @nc = map((new Cone(INPUT_RAYS=>$result->RAYS->minor($_,All))),@{$result->MAXIMAL_CONES});
   foreach my $f (@coll){
      my @intersectors = @nc;
      @nc = ();
      foreach my $mc (@{$f->MAXIMAL_CONES}){
         # print "Intersecting.\n";
         my $pmc = new Cone(INPUT_RAYS=>$f->RAYS->minor($mc,All));
         my @toadd = map(intersection($pmc,$_),@intersectors);
         @toadd = grep($_->DIM > 0, @toadd);
         foreach my $c (@toadd){
            my $s = grep(equal_polyhedra($_,$c),@nc);
            if($s==0){
               push @nc, new Cone($c);
            }
         }
      }
      my $n = @nc;
      print $n," cones.\n";
      # $result = check_fan_objects(@nc);
   }
   print "Checking fan.\n";
   my @rays = ();
   foreach my $c (@nc){
      foreach my $r (@{$c->RAYS}){
         my $s = grep($_ == $r, @rays);
         if($s == 0){
            push @rays, $r;
         }
      }
   }
   my $rays = new Matrix(@rays);
   my $raymap = new Map<Vector, Integer>();
   my $i = 0;
   foreach my $r (@rays){
      $raymap->{$r} = $i;
      $i++;
   }
   my @mc = ();
   foreach my $c (@nc){
      push @mc, new Set<Integer>(map($raymap->{$_}, @{$c->RAYS}));
   }
   $result = check_fan($rays, new Array<Set<Int>>(@mc));
   print "Some information:\n";
   print "Pure: ",$result->PURE,"\n";
   print "dim: ",$result->DIM,"\n";
   return $result;
}

user_function findParallelEdge(Cloud, Cloud){
   my($g, $f) = @_;
   my $Pg = $g->POLYTOPE;
   my $Pf = $f->POLYTOPE;
   # print "V:\n",$Pg->VERTICES;
   # print "F:\n",$Pg->FACETS;
   my $edges_g = $Pg->GRAPH->EDGES;
   my $edges_f = $Pf->GRAPH->EDGES;
   # print $edges_g,"\n";
   my $ftv_g = $Pg->FACETS_THRU_VERTICES;
   my $ftv_f = $Pf->FACETS_THRU_VERTICES;
   # print $ftv_g;
   my @edges_g = map(($ftv_g->[$_->[0]]) * ($ftv_g->[$_->[1]]), @$edges_g);
   my @edges_f = map(($ftv_f->[$_->[0]]) * ($ftv_f->[$_->[1]]), @$edges_f);
   
   @edges_g = map((new Cone(INPUT_RAYS=>$Pg->FACETS->minor($_,~[0]))), @edges_g);
   @edges_f = map((new Cone(INPUT_RAYS=>$Pf->FACETS->minor($_,~[0]))), @edges_f);
  
   my $gcounter = 0;
   foreach my $cg (@edges_g){
      my $fcounter = 0;
      foreach my $cf (@edges_f){
         my $intersection = intersection($cg, $cf);
         if($intersection->DIM == $intersection->AMBIENT_DIM-1){
            my $candidate = new Vector($intersection->REL_INT_POINT);
            my $gft = grep($_*$candidate == 0, @{$cg->FACETS});
            my $fft = grep($_*$candidate == 0, @{$cf->FACETS});
            # # print "candidate: ",$candidate,"\n";
            # print "Pair: ",$gcounter," ",$fcounter," ",$gft+$fft,".\n";
            # # print "Dims: ",$cg->DIM," ",$cf->DIM,"\n";
            # # print $cg->FACETS,"\n",$cf->FACETS;
            # print $Pg->GRAPH->EDGE_DIRECTIONS->[$gcounter],"\n";
            # print $Pf->GRAPH->EDGE_DIRECTIONS->[$fcounter],"\n";
            if($gft + $fft == 0){
               print "THESE WERE PARALLEL!\n";
               return -$intersection->REL_INT_POINT;
            }
         }
         $fcounter++;
      }
      $gcounter++;
   }
   print "NO PARALLELS!";
   return zero_vector(42);
}

user_function checkWGFan(@){
   my(@a) = @_;
   my $b = "abcdefghijklmnop";
   my $gfan_input="Q[";
   my $n = (keys %{$a[0]})[0]->dim;
   $gfan_input .= join(",", split(//,substr($b,0,$n)));
   $gfan_input .= "]\{\n";
   foreach my $f (@a){
      $gfan_input .= cloud2Polynomial($f,$b).",\n";
   }
   $gfan_input .= "0\n\}";
   print $gfan_input,"\n";
   
   my $tempfile=new Tempfile;
   # Writing data to file:
   open(my $input, ">$tempfile.in") or die "Can't create temporary file $tempfile.in: $!";
   print $input $gfan_input;
   close $input;
   # Executing gfan:
   system("gfan_homogenize -i -H < $tempfile.in | gfan_buchberger | gfan_tropicalstartingcone | gfan_tropicaltraverse --xml > $tempfile.out");
   return User::load("$tempfile.out");
}

user_function cloud2Polynomial(Map<Vector, Rational>, $ ){
   my($a, $b) = @_;
   #my $b = "abcdefghijklmnop";
   my $result = "";
   foreach my $key (keys %$a){
      my $monomial = "";
      if($a->{$key} > 0){
         $monomial .= "+";
      }
      $monomial .= $a->{$key};
      for(my $i=0; $i<$key->dim; $i++){
         if($key->[$i] != 0){
            $monomial .= substr($b,$i,1);
            if($key->[$i] > 1){
               $monomial .= $key->[$i];
            }
         }
      }
      $result .= $monomial;
   }
   return $result;
}

user_function step1(Cloud, Cloud, Vector){
   my($g, $f, $v) = @_;
   my $edge_f = maxCloudPoints($f, $v);
   my $edge_g = maxCloudPoints($g, $v);
   # print "f: ",$edge_f,"\n";
   # print "g: ",$edge_g,"\n";
   my $first_f = new Vector($v->dim);
   my $first_g = new Vector($v->dim);
   foreach my $key (keys %$edge_f){
      if(lex($key, $first_f)){
         $first_f = $key;
      }
   }
   foreach my $key (keys %$edge_g){
      if(lex($key, $first_g)){
         $first_g = $key;
      }
   }
   my $factor = -$g->{$first_g}/$f->{$first_f};
   my $shift = $first_g - $first_f;
   # print "Shift: ",$shift,"\n";
   my $summand = shiftCloud($f, $shift);
   $summand = multCloud($summand, $factor);
   # print $summand,"\n";
   return addClouds($g, $summand);
}

user_function lex(Vector, Vector){
   my($a, $b) = @_;
   my $t = $a-$b;
   my $i = 0;
   while(($t->[$i] == 0) && ($i < $a->dim-1)){
      $i++;
   }
   return ($t->[$i] > 0);
}

user_function addClouds(Cloud, Cloud){
   my($a, $b) = @_;
   my $result = new Map<Vector<Integer>, Rational>();
   foreach my $key (@{$a->EXPONENTS/$b->EXPONENTS}){
      if(exists($a->COEFFICIENTS->{$key})){
         $result->{$key} += $a->{$key};
      }
      if(exists($b->COEFFICIENTS->{$key})){
         $result->{$key} += $b->{$key};
      }
   }
   return new Cloud(COEFFICIENTS=>cleanup($result));
}

user_function shiftCloud(Cloud, Vector){
   my($a, $b) = @_;
   my $result = new Map<Vector<Integer>, Rational>();
   foreach my $key (@{$a->EXPONENTS}){
      $result->{$key+$b} = $a->COEFFICIENTS->{$key};
   }
   return new Cloud(COEFFICIENTS=>$result);
}

user_function multCloud(Cloud, $ ){
   my($a, $b) = @_;
   if($b != 0){
      my $coeffs = $a->COEFFICIENTS;
      my $res = new Map<Vector<Integer>, Rational>();
      for my $key (keys %$coeffs){
         $res->{$key} = $b * $coeffs->{$key};
      }
      return new Cloud(EXPONENTS=>$a->EXPONENTS, COEFFICIENTS=>$res);
   }
   return new Cloud(EXPONENTS=>new Matrix<Integer>());
}

user_function maxCloudValue(Cloud, Vector){
   my($a, $b) = @_;
   my $result = 0;
   foreach my $key (@{$a->EXPONENTS}){
       $result = maximum([$result, $key*$b]);
   }
   return $result;
}

user_function maxCloudPoints(Cloud, Vector){
   my($a, $b) = @_;
   my $value = maxCloudValue($a, $b);
   my $result = new Map<Vector, Rational>();
   foreach my $key (@{$a->EXPONENTS}){
      if($value == $key*$b){
         $result->{$key} = $a->{$key};
      };
   }
   return new Cloud(COEFFICIENTS=>$result);
}

user_function cleanup(Map<Vector, Rational>){
   my($a) = @_;
   my $result = new Map<Vector, Rational>();
   foreach my $key (keys %$a){
      if($a->{$key} != 0){
         $result->{$key} = $a->{$key};
      }
   }
   return $result;
}
