#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

INCLUDE
   utilities.rules
   singular.rules
   milnor.rules
   commalg.rules
   cyclic_quotient.rules
   tropical.rules
   downgrading.rules
   deformations.rules
   tor.rules

user_function testing(Cone, Vector, Vector){
   my($c, $v1, $v2) = @_;
   my $H = $c->HILBERT_BASIS_GENERATORS->[0];
   my $F = $c->FACETS;
   if($v1->dim != $F->rows){ die "Wrong number of entries.";}

   my $P1 = new Polytope(INEQUALITIES => (-$v1 | $F));
   my $P2 = new Polytope(INEQUALITIES => (-$v2 | $F));

   my $C1 = new Cone($P1);
   my $C2 = new Cone($P2);

   my $gen1 = new Matrix( grep($_->[0] == 1, @{$C1->HILBERT_BASIS_GENERATORS->[0]}));
   my $gen2 = new Matrix( grep($_->[0] == 1, @{$C2->HILBERT_BASIS_GENERATORS->[0]}));

   $gen1 = $gen1->minor(All, ~[0]);
   $gen2 = $gen2->minor(All, ~[0]);

   my $toric = $c->TORIC_IDEAL;


}

user_function spoly_variant( $ , $ , $ ){
   my($r, $f, $g) = @_;
   my $Nf = newton($f);
   my $Ng = newton($g);
   my $matf = new Matrix($f->coefficients_as_vector | (new Matrix<Rational>($f->monomials_as_matrix)));
   my $matg = new Matrix($g->coefficients_as_vector | (new Matrix<Rational>($g->monomials_as_matrix)));
   my @colf = ();
   foreach my $v (@$matf){
      foreach my $w (@{$Nf->VERTICES}){
         if($v->slice(1) == $w->slice(1)){
            push @colf, $v;
         }
      }
   }
   my $multf = new Matrix(@colf);
   my $kf = new Polynomial((new Matrix<Int>($multf->minor(All,~[0]))), $multf->col(0),$r);
   my @colg = ();
   foreach my $v (@$matg){
      foreach my $w (@{$Ng->VERTICES}){
         if($v->slice(1) == $w->slice(1)){
            push @colg, $v;
         }
      }
   }
   my $multg = new Matrix(@colg);
   my $kg = new Polynomial((new Matrix<Int>($multg->minor(All,~[0]))), $multg->col(0),$r);
   return $kg * $f - $kf * $g;
}
