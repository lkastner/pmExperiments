#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

declare object DGLA_step;

declare object DGLA_singular_object;

object DGLA_singular_object {
   
   property RING : String;
   
   # The morphism will be encoded as a matrix in Singular, since the involved
   # modules are free. Then we can compute the kernel.
   property MORPHISM : String;

   property KERNEL : String;

   property KOSZUL_IMAGE : String;

   property REDUCED_KERNEL : String;

   rule REDUCED_KERNEL : KERNEL, KOSZUL_IMAGE {
      # TODO
      # Compute standard basis of koszul image.
      # Reduce kernel module image.
   }
   
   # TODO
   # Retrieve the singular matrices as polymake matrices of polynomials.
   
}


object DGLA_step{
   
   property PREVIOUS_STEP : DGLA_step;

   property Y_VARS : Matrix;

   property BASIS0 : Vector<Matrix>;
   
   property BASIS0_INDEX : Map<Matrix, Int>;

   rule BASIS0_INDEX : BASIS0 {
      my $basis0 = $this->BASIS0;
      my $result = new Map<Matrix, Int>;
      for(my $i = 0; $i<$basis0->dim; $i++){
         $result->{$basis0->[$i]} = $i;
      }
      $this->BASIS0_INDEX = $result;
   }

   property DEG0 : Int;

   property DEG1 : Int;

   rule DEG1 : DEG0 {
      $this->DEG1 = $this->DEG0 + 1;
   }

   property KOSZUL_BASIS : Vector<Matrix>;
   
   property KOSZUL_IMAGE : Matrix<Polynomial>;

   property BASIS1 : Vector<Matrix>;

   property BASIS1_INDEX : Map<Matrix, Int>;

   rule BASIS1_INDEX : BASIS1 {
      my $basis1 = $this->BASIS1;
      my $result = new Map<Matrix, Int>;
      for(my $i = 0; $i<$basis1->dim; $i++){
         $result->{$basis1->[$i]} = $i;
      }
      $this->BASIS1_INDEX = $result;
   }

   property MAP : Matrix<Polynomial>;
   
   property KERNEL : Matrix<Polynomial>;

   property REDUCED_KERNEL : Matrix<Polynomial>;

   property BASERING : Ring;
   
   property SINGULAR_REFS : DGLA_singular_object;

   rule SINGULAR_REFS.RING : BASERING {
      # Write polymake ring to singular.
   }

   rule SINGULAR_REFS.MORPHISM : SINGULAR_REFS.RING, MAP {
      # 1. Set polynomial ring.
      # 2. Write matrix to singular.
   }

   rule BASIS0, BASIS0_INDEX : PREVIOUS_STEP.BASIS1, PREVIOUS_STEP.BASIS1_INDEX {
      $this->BASIS0 = $this->PREVIOUS_STEP->BASIS1;
      $this->BASIS0_INDEX = $this->PREVIOUS_STEP->BASIS1_INDEX;
   }

   rule DEG0 : PREVIOUS_STEP.DEG1 {
      $this->DEG0 = $this->PREVIOUS_STEP->DEG1;
   }

   rule BASIS1 : KOSZUL_BASIS, DEG1, REDUCED_KERNEL {
      # TODO
      # Append new variables for every kernel element.
   }

   rule MAP : KOSZUL_IMAGE, REDUCED_KERNEL {
      $this->MAP = new Matrix($this->KOSZUL_IMAGE | $this->REDUCED_KERNEL);
   }

   rule KOSZUL_BASIS : PREVIOUS_STEP.Y_VARS, DEG1 {
      my $oldYs = $this->PREVIOUS_STEP->Y_VARS;
      my $d = $this->DEG1;
      # print $d,"\n";
      my $ineq = zero_vector($oldYs->rows) | unit_matrix($oldYs->rows);
      my $i;
      foreach my $y (@$oldYs){
         if((new Int($y->[0]))%2 == 1){
            my $toadd = unit_vector($oldYs->rows+1,0)-unit_vector($oldYs->rows+1,$i+1);
            $ineq = new Matrix($ineq/$toadd);
         }
         $i++;
      }
      # print "Ineq:\n",$ineq,"\n";
      my $eq = ((-1)*$d) | $oldYs->col(0);
      # print "Eq:\n",$eq,"\n";
      my $testPolytope = new Polytope(INEQUALITIES=>$ineq, EQUATIONS=>$eq);
      my $lps = $testPolytope->LATTICE_POINTS->minor(All, ~[0]);
      my @monomials = map(monomial_exponent_from_vector_and_vars($_, $oldYs), @$lps);
      # print join("\n\n", @monomials);
      $this->KOSZUL_BASIS = new Vector<Matrix>([@monomials]);
   }

   rule KOSZUL_IMAGE : KOSZUL_BASIS, PREVIOUS_STEP {
      my $kb = $this->KOSZUL_BASIS;
      my $prevDGLA = $this->PREVIOUS_STEP;
      foreach my $element (@$kb){
         print "Current monomial:\n",$element,"\n";
         my ($a, $b) = split_monomial($element);
         print "Split into\n",$a,"\nand\n",$b,"\n";
         my ($aImage, $aImageBasis) = get_image_of_monomial(new Matrix([$a]), $prevDGLA);
         my ($bImage, $bImageBasis) = get_image_of_monomial($b, $prevDGLA);
         print "Images are:\n",$aImage,"\nand\n",$bImage,"\n";
         foreach my $b (@$bImageBasis){
            print product_and_sign_of_var_with_mon($a, $b),"\n";
         }

         foreach my $a (@$aImageBasis){
            print product_and_sign_of_mon_with_mon($a, $b);
         }
      }
   }

}

sub display_left_product_in_basis{
   my($a, $vec, $vecBasis, $newBasisHash) = @_;
}


sub product_and_sign_of_mon_with_mon{
   my($mon1, $mon2) = @_;
   my $sign = 1;
   my $prod = new Matrix($mon1);
   foreach my $mon (@$mon2) {
      my $var = new Vector($mon);
      $var->[2] = 1;
      for(my $i = 0; $i<$mon->[2]; $i++){
         my ($a, $b) = product_and_sign_of_mon_with_var($prod, $var);
         $sign *= $a;
         $prod = $b;
      }
   }
   return ($sign, $prod);
}


sub product_and_sign_of_mon_with_var{
   my($mon, $var) = @_;
   my $sign = find_switchSign($var, $mon);
   my ($a, $b) = product_and_sign_of_var_with_mon($var, $mon);
   return ($sign*$a, $b);
}



sub product_and_sign_of_var_with_mon{
   # Get the sign and resulting sorted(!) monomial, when multiplying var*mon.
   my($var, $mon) = @_;
   if($mon == zero_matrix(0,3)){
      return (1, new Matrix([$var]));
   }
   my $i = 0;
   while(($i < $mon->rows) and ($var->[0] > $mon->($i, 0))){$i++;}
   while(($i < $mon->rows) and ($var->[1] > $mon->($i, 1))){$i++;}
   if($i == 0){
      return (1, prepend_var_to_mon($var, $mon));
   } elsif ($i < $mon->rows){
      my $first = $mon->minor([0..($i-1)], All);
      my $last = $mon->minor([$i..($mon->rows - 1)], All);
      my $result = new Matrix($first / prepend_var_to_mon($var, $last));
      return(find_switchSign($var, $first), $result);
   } else {
      return(find_switchSign($var, $mon), (new Matrix($mon/$var)));
   }
}



sub find_switchSign{
   # We compute the sign when moving var to the end of monomial mon.
   my($var, $mon) = @_;
   my $switchSign = 0;
   my $vardeg = $var->[0];
   foreach my $v (@$mon){
      my $deg = $v->[0];
      my $pow = $v->[2];
      $switchSign += $pow*($deg*$vardeg);
   }
   return $switchSign%2 == 0 ? 1 : -1;
}



sub prepend_var_to_mon{
   my($var, $mon) = @_;
   my $result = new Matrix($mon);
   if($mon->[0] == $var) { 
      $result->(0,2)++;
   } else {
      $result = $var/$result;
   }
   return $result;
}



sub get_image_of_monomial{
   my($monomial, $dgla) = @_;
   my $degree = degree_of_monomial($monomial);
   if($dgla->DEG1 == $degree){
      for(my $i=0; $i< $dgla->BASIS1->dim; $i++){
         if($monomial == $dgla->BASIS1->[$i]){
            return ($dgla->MAP->[$i], $dgla->BASIS0);
         }
      }
   } elsif ($dgla->DEG1 > $degree) {
      return get_image_of_monomial($monomial, $dgla->PREVIOUS_STEP);
   } 
   die "Could not find image of monomial $monomial.";
}



sub degree_of_monomial{
   my($monomial) = @_;
   my $result = 0;
   foreach my $varpow (@$monomial){
      my $vardeg = $varpow->[0];
      my $pow = $varpow->[2];
      $result += $vardeg*$pow;
   }
   return $result;
}



sub monomial_exponent_from_vector_and_vars{
   my($ve, $var) = @_;
   my $vec = new Vector($ve);
   my $vars = new Matrix($var);
   ($vec->dim == $vars->rows) or die "Cannot convert from vector to monomial.";
   my $result = new Matrix(0,3);
   for(my $i = 0; $i<$vec->dim; $i++){
      if($vec->[$i] != 0){
         my $toadd = $vars->[$i] | $vec->[$i];
         $result = new Matrix($result / $toadd);
      }
   }
   return $result;
}



sub split_monomial{
   my($monomial) = @_;
   my $first = new Vector($monomial->[0]);
   my $rest = new Matrix($monomial);
   if($first->[2] == 1){
      $rest = $rest->minor(~[0], All);
   } else {
      $rest->(0,2)--;
      $first->[2] = 1;
   }
   return ($first, $rest);
}


sub get_singular_matrix{
   my($name, $ring) = @_;
   singular_eval("int rows = nrows(".$name.");");
   singular_eval("int cols = ncols(".$name.");");
   my $rows = singular_get_var("rows");
   my $cols = singular_get_var("cols");
   my $result = new Matrix<Polynomial>($rows, $cols);
   for(my $i = 0; $i<$rows; $i++){
      for(my $j = 0; $j<$rows; $j++){
         singular_eval("poly polymake_temp = ".$name."[".($i+1).",".($j+1)."];");
         my $entry = get_singular_poly("polymake_temp", $ring);
         $result->($i, $j) = $entry;
      }
   }
   return $result;
}


user_function initialize_dgla(Cone){
   my($c) = @_;
   my $ideal = $c->TORIC_IDEAL;
   print $ideal,"\n";
   my @vars = map("x_".$_, 0..($ideal->cols - 1));
   my $R = new Ring(@vars);
   my @polys = map(vector_to_binomial_string($_, @vars), @$ideal);
   @polys = map((new Polynomial($R, $_)), @polys);

   my $Map = new Matrix<Polynomial>([[@polys]]);
   my $basis0 = new Vector<Matrix>([zero_matrix(0,3)]);
   my @y1s = map((new Matrix([[1,$_]])), (0..($Map->cols - 1)));
   my @y1sWPow = map(($_ | ones_vector(1)), @y1s);
   my $basis1 = new Vector<Matrix>([@y1sWPow]);
   
   my $y1mat = new Matrix(map($_->[0], @y1s));

   return new DGLA_step(BASIS0=>$basis0, MAP=>transpose($Map), BASIS1=>$basis1, Y_VARS=>$y1mat, DEG0=>0);

}


