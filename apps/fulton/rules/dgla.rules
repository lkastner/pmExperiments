#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

declare object DGLA_step;

declare object DGLA_singular_object;

object DGLA_singular_object {
   
   property RING : String;
   
   # The morphism will be encoded as a matrix in Singular, since the involved
   # modules are free. Then we can compute the kernel.
   property MORPHISM : String;

   property KERNEL : String;

   property KOSZUL_IMAGE : String;

   property REDUCED_KERNEL : String;

   rule REDUCED_KERNEL : KERNEL, KOSZUL_IMAGE, RING {
      # TODO
      # Compute standard basis of koszul image.
      # Reduce kernel module image.
      my $ring = $this->RING;
      my $kernel = $this->KERNEL;
      my $koszul = $this->KOSZUL_IMAGE;
      my $name = get_random_string();
      my $singular_cmd = "setring(".$ring.");\n";
      $singular_cmd .= "module ".$koszul."module = std(module(".$koszul."));\n";
      $singular_cmd .= "module ".$name."module = reduce(module(".$kernel."),".$koszul."module);\n";
      $singular_cmd .= $name."module = simplify(".$name."module, 6);\n";
      $singular_cmd .= "matrix ".$name." = matrix(".$name."module);\n";
      singular_eval($singular_cmd);
      $this->REDUCED_KERNEL = $name;
   }
   
   # TODO
   # Retrieve the singular matrices as polymake matrices of polynomials.
   #
   rule KERNEL : MORPHISM, RING {
      my $ring = $this->RING;
      my $morphism = $this->MORPHISM;
      my $name = get_random_string();
      my $singular_cmd = "setring(".$ring.");\n";
      $singular_cmd .= "matrix ".$name." = ";
      $singular_cmd .= "matrix(syz(module(".$morphism.")));\n";
      singular_eval($singular_cmd);
      $this->KERNEL = $name;
   }
   
}


object DGLA_step{
   
###############################################################################
###############################################################################
###
###  Properties
###
###############################################################################
###############################################################################

   property PREVIOUS_STEP : DGLA_step;

   property Y_VARS : Matrix;

   property X_DEGS : Matrix;

   property Y_DEGS : Map<Vector, Vector>;

   property BASIS0 : Vector<Matrix>;
   
   property BASIS0_INDEX : Map<Matrix, Int>;

   property DEG0 : Int;

   property DEG1 : Int;

   property KOSZUL_BASIS : Vector<Matrix>;
   
   property KOSZUL_IMAGE : Matrix<Polynomial>;

   property BASIS1 : Vector<Matrix>;

   property BASIS1_INDEX : Map<Matrix, Int>;

   property MAP : Matrix<Polynomial>;
   
   property KERNEL : Matrix<Polynomial>;

   property REDUCED_KERNEL : Matrix<Polynomial>;
   
   property BASERING : Ring;
   
   property SINGULAR_REFS : DGLA_singular_object;

###############################################################################
###############################################################################
###
###  Rules
###
###############################################################################
###############################################################################

   rule X_DEGS : PREVIOUS_STEP.X_DEGS {
      $this->X_DEGS = new Matrix($this->PREVIOUS_STEP->X_DEGS);
   }
   precondition : DEG0 {
      $this->DEG0 > 0;
   }

   rule Y_DEGS : PREVIOUS_STEP.Y_DEGS, X_DEGS, MAP, Y_VARS, BASIS1_INDEX, BASIS0 {
      my $previousYDegs = $this->PREVIOUS_STEP->Y_DEGS;
      my $basis1Index = $this->BASIS1_INDEX;
      my $basis0 = $this->BASIS0;
      my $xdegs = $this->X_DEGS;
      my $map = $this->MAP;
      my %previousYDegsHash = %$previousYDegs;
      my $result = new Map<Vector, Vector>();
      foreach my $y (@{$this->Y_VARS}){
         if(exists $previousYDegs->{$y}){
            # print $y, " Exists!\n";
            $result->{$y} = new Vector($previousYDegs->{$y});
         } else {
            # print $y, " Doesn't exist!\n";
            my $ypow1 = new Matrix([[@$y, 1]]);
            my $index = $basis1Index->{$ypow1};
            my $image = $map->[$index];
            $result->{$y} = degree_of_yvector($image, $xdegs, $previousYDegs, $basis0);
         }

      }
      $this->Y_DEGS = $result;
   }
   precondition : DEG0 {
      $this->DEG0 > 0;
   }
   
   rule Y_DEGS : X_DEGS, MAP, Y_VARS {
      my $xdeg = $this->X_DEGS;
      # print $xdeg;
      my $map = $this->MAP;
      # print $map;
      my $yvars = $this->Y_VARS;
      my $result = new Map<Vector, Vector>();
      for(my $i = 0; $i<$yvars->rows; $i++){
         my $y = new Vector($yvars->[$i]);
         my $image = $map->($i,0);
         my $deg = degree_of_xpoly($image, $xdeg);
         $result->{$y} = $deg;
      }
      $this->Y_DEGS = $result;
   }
   precondition : DEG0 {
      $this->DEG0 == 0;
   }

   rule KERNEL : SINGULAR_REFS.KERNEL, BASERING {
      my $name = $this->SINGULAR_REFS->KERNEL;
      my $ring = $this->BASERING;
      my $result = get_singular_matrix($name, $ring);
      $this->KERNEL = transpose($result);
   }

   rule DEG1 : DEG0 {
      $this->DEG1 = $this->DEG0 + 1;
   }

   rule BASIS0_INDEX : BASIS0 {
      my $basis0 = $this->BASIS0;
      my $result = new Map<Matrix, Int>;
      for(my $i = 0; $i<$basis0->dim; $i++){
         $result->{$basis0->[$i]} = $i;
      }
      $this->BASIS0_INDEX = $result;
   }

   rule BASIS1_INDEX : BASIS1 {
      my $basis1 = $this->BASIS1;
      my $result = new Map<Matrix, Int>;
      for(my $i = 0; $i<$basis1->dim; $i++){
         $result->{$basis1->[$i]} = $i;
      }
      $this->BASIS1_INDEX = $result;
   }

   rule REDUCED_KERNEL : SINGULAR_REFS.REDUCED_KERNEL, BASERING {
      my $name = $this->SINGULAR_REFS->REDUCED_KERNEL;
      my $ring = $this->BASERING;
      my $result = get_singular_matrix($name, $ring);
      $this->REDUCED_KERNEL = transpose($result);
   }

   rule PREVIOUS_STEP.SINGULAR_REFS.KOSZUL_IMAGE : KOSZUL_IMAGE, PREVIOUS_STEP.SINGULAR_REFS.RING {
      my $ring = $this->PREVIOUS_STEP->SINGULAR_REFS->RING;
      my $koszul = $this->KOSZUL_IMAGE;
      my $name = get_random_string();
      my $singular_cmd = "setring(".$ring.");\n";
      $singular_cmd .= build_singular_matrix($koszul, $name);
      $singular_cmd .= $name." = transpose(".$name.");\n";
      singular_eval($singular_cmd);
      $this->PREVIOUS_STEP->SINGULAR_REFS->KOSZUL_IMAGE = $name;
   }

   rule SINGULAR_REFS.RING : BASERING {
      # Write polymake ring to singular.
      my $ring = $this->BASERING;
      my $name = get_random_string();
      my $singular_def = "ring ".$name." = 0,(";
      $singular_def .= join(",",$ring->variables);
      $singular_def .= "),dp;";
      singular_eval($singular_def);
      $this->SINGULAR_REFS->RING = $name;
   }

   rule SINGULAR_REFS.MORPHISM : SINGULAR_REFS.RING, MAP {
      my $ring = $this->SINGULAR_REFS->RING;
      my $map = $this->MAP;
      my $name = get_random_string();
      my $singular_def = "setring ".$ring.";\n";
      $singular_def .= build_singular_matrix($map, $name);
      $singular_def .= $name." = transpose(".$name.");";
      singular_eval($singular_def);
      $this->SINGULAR_REFS->MORPHISM = $name;
   }

   rule BASERING : PREVIOUS_STEP.BASERING {
      $this->BASERING = $this->PREVIOUS_STEP->BASERING;
   }

   rule BASIS0, BASIS0_INDEX : PREVIOUS_STEP.BASIS1, PREVIOUS_STEP.BASIS1_INDEX {
      $this->BASIS0 = $this->PREVIOUS_STEP->BASIS1;
      $this->BASIS0_INDEX = $this->PREVIOUS_STEP->BASIS1_INDEX;
   }

   rule DEG0 : PREVIOUS_STEP.DEG1 {
      $this->DEG0 = $this->PREVIOUS_STEP->DEG1;
   }

   rule Y_VARS : DEG1, PREVIOUS_STEP.REDUCED_KERNEL, PREVIOUS_STEP.Y_VARS {
      my $deg = $this->DEG1;
      my @given = @{$this->PREVIOUS_STEP->Y_VARS};
      my @toappend = ();
      for(my $i = 0; $i<$this->PREVIOUS_STEP->REDUCED_KERNEL->rows; $i++){
         push @toappend, new Vector([$deg, $i]);
      }
      $this->Y_VARS = new Matrix([@given, @toappend]);

   }

   rule BASIS1 : KOSZUL_BASIS, DEG1, PREVIOUS_STEP.REDUCED_KERNEL {
      # TODO
      # Append new variables for every kernel element.
      my $deg = $this->DEG1;
      my @given = @{$this->KOSZUL_BASIS};
      my @toappend = ();
      for(my $i = 0; $i<$this->PREVIOUS_STEP->REDUCED_KERNEL->rows; $i++){
         push @toappend, new Matrix([[$deg, $i, 1]]);
      }
      $this->BASIS1 = new Vector<Matrix>([@given, @toappend]);
   }

   rule MAP : KOSZUL_IMAGE, PREVIOUS_STEP.REDUCED_KERNEL {
      $this->MAP = new Matrix<Polynomial>($this->KOSZUL_IMAGE / $this->PREVIOUS_STEP->REDUCED_KERNEL);
   }

   rule KOSZUL_BASIS : PREVIOUS_STEP.Y_VARS, DEG1 {
      my $oldYs = $this->PREVIOUS_STEP->Y_VARS;
      my $d = $this->DEG1;
      # print $d,"\n";
      my $ineq = zero_vector($oldYs->rows) | unit_matrix($oldYs->rows);
      my $i;
      foreach my $y (@$oldYs){
         if((new Int($y->[0]))%2 == 1){
            my $toadd = unit_vector($oldYs->rows+1,0)-unit_vector($oldYs->rows+1,$i+1);
            $ineq = new Matrix($ineq/$toadd);
         }
         $i++;
      }
      # print "Ineq:\n",$ineq,"\n";
      my $eq = ((-1)*$d) | $oldYs->col(0);
      # print "Eq:\n",$eq,"\n";
      my $testPolytope = new Polytope(INEQUALITIES=>$ineq, EQUATIONS=>$eq);
      my $lps = $testPolytope->LATTICE_POINTS->minor(All, ~[0]);
      my @monomials = map(monomial_exponent_from_vector_and_vars($_, $oldYs), @$lps);
      # print join("\n\n", @monomials);
      $this->KOSZUL_BASIS = new Vector<Matrix>([@monomials]);
   }

   rule KOSZUL_IMAGE : KOSZUL_BASIS, PREVIOUS_STEP, BASIS0_INDEX, BASERING {
      my $kb = $this->KOSZUL_BASIS;
      my $R = $this->BASERING;
      my $prevDGLA = $this->PREVIOUS_STEP;
      my $newBasisHash = $this->BASIS0_INDEX;
      my @result;
      foreach my $element (@$kb){
         # print "Current monomial:\n",$element,"\n";
         my ($a, $b) = split_monomial($element);
         # print "Split into\n",$a,"\nand\n",$b,"\n";
         my ($aImage, $aImageBasis) = get_image_of_monomial(new Matrix([$a]), $prevDGLA);
         my ($bImage, $bImageBasis) = get_image_of_monomial($b, $prevDGLA);
         my $asb = display_left_product_in_basis($a, $bImage, $bImageBasis, $newBasisHash, $R);
         my $sab = display_right_product_in_basis($aImage, $b, $aImageBasis, $newBasisHash, $R);
         my $image = (new Int($a->[0]))%2 == 0 ? $sab + $asb : $sab - $asb;
         push @result, $image;
      }
      $this->KOSZUL_IMAGE = new Matrix<Polynomial>(@result);
   }

###############################################################################
###############################################################################
###
###  User methods
###
###############################################################################
###############################################################################
   
   user_method print_s_nicely() {
      my($dglas) = @_;
      my $basis1 = $dglas->BASIS1;
      my $basis0 = $dglas->BASIS0;
      my $morphism = $dglas->MAP;
      my $zero = new Polynomial($dglas->BASERING);
      for(my $i=0; $i<$basis1->dim; $i++){
         my $ymon = $basis1->[$i];
         my $ymonString = monomial_to_string($ymon);
         my $image = vector_to_string_in_basis($morphism->[$i], $basis0, $zero);
         print "s(".$ymonString.") = ".$image."\n";
      }
   }

}


###############################################################################
###############################################################################
###
###  Helper methods
###
###############################################################################
###############################################################################

sub degree_of_yvector{
   my($vec, $xdegs, $ydegs, $basis) = @_;
   my $i = 0;
   while($vec->[$i] == 0){ $i++;}
   return degree_of_xpoly($vec->[$i], $xdegs) + degree_of_ymon($basis->[$i], $ydegs);
}

sub degree_of_ymon{
   my($mon, $ydegs) = @_;
   my $init = $mon->[0];
   $init = new Vector([$init->[0], $init->[1]]);
   my $result = new Vector($ydegs->{$init}->dim);
   foreach my $varpow (@$mon){
      my $var = new Vector([$varpow->[0], $varpow->[1]]);
      my $pow = $varpow->[2];
      $result = new Vector($result + ($pow*$ydegs->{$var}));
   }
   return $result;
}

sub degree_of_xpoly{
   my($f, $degs) = @_;
   my $exp = $f->monomials_as_matrix();
   my $first = $exp->[0];
   return new Vector($first * $degs);
}

sub vector_to_string_in_basis{
   my($vec, $basis, $zero) = @_;
   my @result = ();
   for(my $i = 0; $i<$vec->dim; $i++){
      $vec->[$i] != $zero or next;
      my $coef = "(".$vec->[$i].")";
      my $gen = monomial_to_string($basis->[$i]);
      my $term = length($gen) > 0 ? $coef."*".$gen : $coef;
      push @result, $term;
   }
   return join(" + ", @result);
}

sub monomial_to_string{
   my($monomial) = @_;
   my @result = ();
   foreach my $varpow (@$monomial){
      my $pow = $varpow->[2];
      my $deg = $varpow->[0];
      my $index = $varpow->[1];
      my $term = "y_{".$index."}^{(".$deg.")}";
      $term = $pow > 1 ? "(".$term.")" : $term;
      push @result, $term;
   }
   return join("*", @result);
}

sub display_right_product_in_basis{
   my($vec, $b, $vecBasis, $newBasisHash, $R) = @_;
   my @filling = map((new Polynomial($R)), (0..(scalar(keys %$newBasisHash) - 1)));
   my $result = new Vector<Polynomial>(@filling);
   for(my $i = 0; $i<$vec->dim; $i++){
      if($vec->[$i] != 0){
         my ($sign, $basisElement) = product_and_sign_of_mon_with_mon($vecBasis->[$i], $b);
         my $index = $newBasisHash->{$basisElement};
         $result->[$index] = $sign*($vec->[$i]);
      }
   }
   return $result;
}

sub display_left_product_in_basis{
   my($a, $vec, $vecBasis, $newBasisHash, $R) = @_;
   my @filling = map((new Polynomial($R)), (0..(scalar(keys %$newBasisHash) - 1)));
   my $result = new Vector<Polynomial>(@filling);
   for(my $i = 0; $i<$vec->dim; $i++){
      if($vec->[$i] != 0){
         my ($sign, $basisElement) = product_and_sign_of_var_with_mon($a, $vecBasis->[$i]);
         my $index = $newBasisHash->{$basisElement};
         $result->[$index] = $sign*($vec->[$i]);
      }
   }
   return $result;
}


sub product_and_sign_of_mon_with_mon{
   my($mon1, $mon2) = @_;
   my $sign = 1;
   my $prod = new Matrix($mon1);
   foreach my $mon (@$mon2) {
      my $var = new Vector($mon);
      $var->[2] = 1;
      for(my $i = 0; $i<$mon->[2]; $i++){
         my ($a, $b) = product_and_sign_of_mon_with_var($prod, $var);
         $sign *= $a;
         $prod = $b;
      }
   }
   return ($sign, $prod);
}


sub product_and_sign_of_mon_with_var{
   my($mon, $var) = @_;
   my $sign = find_switchSign($var, $mon);
   my ($a, $b) = product_and_sign_of_var_with_mon($var, $mon);
   return ($sign*$a, $b);
}



sub product_and_sign_of_var_with_mon{
   # Get the sign and resulting sorted(!) monomial, when multiplying var*mon.
   my($var, $mon) = @_;
   if($mon == zero_matrix(0,3)){
      return (1, new Matrix([$var]));
   }
   my $i = 0;
   while(($i < $mon->rows) and ($var->[0] > $mon->($i, 0))){$i++;}
   while(($i < $mon->rows) and ($var->[1] > $mon->($i, 1))){$i++;}
   if($i == 0){
      return (1, prepend_var_to_mon($var, $mon));
   } elsif ($i < $mon->rows){
      my $first = $mon->minor([0..($i-1)], All);
      my $last = $mon->minor([$i..($mon->rows - 1)], All);
      my $result = new Matrix($first / prepend_var_to_mon($var, $last));
      return(find_switchSign($var, $first), $result);
   } else {
      return(find_switchSign($var, $mon), (new Matrix($mon/$var)));
   }
}



sub find_switchSign{
   # We compute the sign when moving var to the end of monomial mon.
   my($var, $mon) = @_;
   my $switchSign = 0;
   my $vardeg = $var->[0];
   foreach my $v (@$mon){
      my $deg = $v->[0];
      my $pow = $v->[2];
      $switchSign += $pow*($deg*$vardeg);
   }
   return (new Int($switchSign))%2 == 0 ? 1 : -1;
}



sub prepend_var_to_mon{
   my($var, $mon) = @_;
   my $result = new Matrix($mon);
   if($mon->[0] == $var) { 
      $result->(0,2)++;
   } else {
      $result = $var/$result;
   }
   return $result;
}



sub get_image_of_monomial{
   my($monomial, $dgla) = @_;
   my $degree = degree_of_monomial($monomial);
   if($dgla->DEG1 == $degree){
      for(my $i=0; $i< $dgla->BASIS1->dim; $i++){
         if($monomial == $dgla->BASIS1->[$i]){
            return ($dgla->MAP->[$i], $dgla->BASIS0);
         }
      }
   } elsif ($dgla->DEG1 > $degree) {
      return get_image_of_monomial($monomial, $dgla->PREVIOUS_STEP);
   } 
   die "Could not find image of monomial $monomial.";
}



sub degree_of_monomial{
   my($monomial) = @_;
   my $result = 0;
   foreach my $varpow (@$monomial){
      my $vardeg = $varpow->[0];
      my $pow = $varpow->[2];
      $result += $vardeg*$pow;
   }
   return $result;
}



sub monomial_exponent_from_vector_and_vars{
   my($ve, $var) = @_;
   my $vec = new Vector($ve);
   my $vars = new Matrix($var);
   ($vec->dim == $vars->rows) or die "Cannot convert from vector to monomial.";
   my $result = new Matrix(0,3);
   for(my $i = 0; $i<$vec->dim; $i++){
      if($vec->[$i] != 0){
         my $toadd = $vars->[$i] | $vec->[$i];
         $result = new Matrix($result / $toadd);
      }
   }
   return $result;
}



sub split_monomial{
   my($monomial) = @_;
   my $first = new Vector($monomial->[0]);
   my $rest = new Matrix($monomial);
   if($first->[2] == 1){
      $rest = $rest->minor(~[0], All);
   } else {
      $rest->(0,2)--;
      $first->[2] = 1;
   }
   return ($first, $rest);
}


sub get_singular_matrix{
   my($name, $ring) = @_;
   singular_eval("int rows = nrows(".$name.");");
   singular_eval("int cols = ncols(".$name.");");
   my $rows = singular_get_var("rows");
   my $cols = singular_get_var("cols");
   # print "R: ",$rows," C: ",$cols,"\n";
   my @result = ();
   for(my $i = 0; $i<$rows; $i++){
      my @vec = ();
      for(my $j = 0; $j<$cols; $j++){
         singular_eval("poly polymake_temp = ".$name."[".($i+1).",".($j+1)."];");
         my $entry = get_singular_poly("polymake_temp", $ring);
         push @vec, $entry;
      }
      push @result, new Vector<Polynomial>([@vec]);
   }
   return new Matrix<Polynomial>([@result]);
}

sub build_singular_matrix{
   my($mat, $name) = @_;
   my $rows = $mat->rows;
   my $cols = $mat->cols;
   my $entries = join(",\n", map(join(",", @$_), @$mat));
   my $result = "matrix ".$name."[".$rows."][".$cols."] = ".$entries.";\n";
   return $result;
}


user_function initialize_dgla(Cone){
   my($C) = @_;
   my $n = $C->HILBERT_BASIS->rows;
   my @vars = map("x_".$_, 0..($n - 1));
   my $id = new BinomialIdeal(RING=>new Ring(\@vars));
   my $c = new Cone(HILBERT_BASIS_GENERATORS=>$C->HILBERT_BASIS_GENERATORS, RAYS=>$C->RAYS, TORIC_IDEAL=>$id);

   my $Map = new Matrix<Polynomial>([[@{$c->TORIC_IDEAL->GENERATORS}]]);
   my $basis0 = new Vector<Matrix>([zero_matrix(0,3)]);
   my @y1s = map((new Matrix([[1,$_]])), (0..($Map->cols - 1)));
   my @y1sWPow = map(($_ | ones_vector(1)), @y1s);
   my $basis1 = new Vector<Matrix>([@y1sWPow]);
   
   my $y1mat = new Matrix(map($_->[0], @y1s));

   return new DGLA_step(BASIS0=>$basis0, MAP=>transpose($Map), BASIS1=>$basis1, Y_VARS=>$y1mat, DEG0=>0, BASERING=>$c->TORIC_IDEAL->RING, X_DEGS=>$c->HILBERT_BASIS);

}


