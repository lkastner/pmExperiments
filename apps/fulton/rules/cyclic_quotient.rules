use List::MoreUtils qw(uniq);

declare object ExtMonomial;

object ExtMonomial{
   
   property DEGREE : Vector;

   property PATH : Matrix;

   property SOURCE : Vector;

}


declare object ResolutionData;

object ResolutionData {
   
   property WEIGHTED_EDGES : Map<Pair<Vector, Vector>, Matrix>;

   property LABELS : String;
   
   property QUIVER : Graph<Directed>;

   property INCIDENCE_MATRIX : Matrix;

}



object CyclicQuotient {
   
   property CLASS_GROUP_REPRESENTATIVES : Matrix;

   rule CLASS_GROUP_REPRESENTATIVES : N, Q{
      my $n = $this->N;
      my $q = $this->Q;
      my @class_group = map((new Vector(-$_, 0)),1..(convert_to<Int>($n)));
      $this->CLASS_GROUP_REPRESENTATIVES = new Matrix<Rational>(@class_group);
   }

   property RESOLUTION : ResolutionData;

   property EXT1_MATRIX : Matrix;
   
   property TOR1_MATRIX : Matrix;

   rule TOR1_MATRIX : EXT1_MATRIX, RESOLUTION.INCIDENCE_MATRIX{
      my $ext1 = $this->EXT1_MATRIX;
      my $incidence_matrix = $this->RESOLUTION->INCIDENCE_MATRIX;
      $this->TOR1_MATRIX = $incidence_matrix * $incidence_matrix * $ext1;
   }

   rule EXT1_MATRIX : DUAL_CONTINUED_FRACTION{
      my $dcf = $this->DUAL_CONTINUED_FRACTION;
      $this->EXT1_MATRIX = ext1_mat_from_dcf($dcf);
   }

   rule RESOLUTION.INCIDENCE_MATRIX : N, RESOLUTION.WEIGHTED_EDGES{
      my $n = $this->N;
      my $weighted_edges = $this->RESOLUTION->WEIGHTED_EDGES;
      my $incidence_matrix = new Matrix((convert_to<Int>($n)), (convert_to<Int>($n)));
      foreach my $edge (keys %$weighted_edges){
         my $source = $edge->[0];
         my $target = $edge->[1];
         #print $source," ",$target,"\n";
         my $row = -$target->[0]-1;
         my $col = -$source->[0]-1;
         $incidence_matrix->($row, $col) = $weighted_edges->{$edge}->rows;
      }
      $this->RESOLUTION->INCIDENCE_MATRIX = $incidence_matrix;
   }

   rule RESOLUTION.WEIGHTED_EDGES : CLASS_GROUP_REPRESENTATIVES, N, Q {
      my $G = $this->CLASS_GROUP_REPRESENTATIVES;
      my $n = $this->N;
      my $weighted_edges = new Map<Pair<Vector, Vector>, Matrix>();
      foreach my $coefficients (@$G){
         my $divisor = $this->DIVISOR(COEFFICIENTS=>$coefficients, temporary);
         my $generators = sort_matrix_rows_by_first_coordinate($divisor->MODULE_GENERATORS);
         # print $generators,"\n";
         my $target = $coefficients;
         for(my $j = 1; $j<$generators->rows; $j++){
            my $inbetween = $generators->[$j]->[0] - $generators->[$j-1]->[0];
            my $source = new Vector(-$inbetween, 0);
            my $edge = new Pair<Vector,Vector>($source, $target);
            my $shift = $generators->[$j-1];
            if(!defined $weighted_edges->{$edge}){
               $weighted_edges->{$edge} = new Matrix($shift);
            } else {
               my $oldshift = $weighted_edges->{$edge};
               $weighted_edges->{$edge} = $oldshift / $shift;
            }
         }
      }
      $this->RESOLUTION->WEIGHTED_EDGES = $weighted_edges;
   }

   rule RESOLUTION.QUIVER.ADJACENCY, RESOLUTION.QUIVER.NODE_LABELS : CLASS_GROUP_REPRESENTATIVES, N, RESOLUTION.WEIGHTED_EDGES{
      my $class_group = $this->CLASS_GROUP_REPRESENTATIVES;
      my $graph = new common::Graph<Directed>($class_group->rows);
      my $weighted_edges = $this->RESOLUTION->WEIGHTED_EDGES;
      my $numbering = new Map<Vector, Int>();
      my $k = 0;
      foreach my $g (@$class_group){
         $numbering->{$g} = $k;
         $k++;
      }
      foreach my $edge (keys %$weighted_edges){
         my $source = $edge->[0];
         my $target = $edge->[1];
         $graph->edge($numbering->{$source}, $numbering->{$target});
      }
      $this->RESOLUTION->QUIVER->NODE_LABELS = @$class_group;
      $this->RESOLUTION->QUIVER->ADJACENCY = $graph;
   }

   user_method ext1(TDivisor, TDivisor){
      my($cqs, $d1, $d2) = @_;
      my $rho1 = new Vector<Rational>(1, new Rational($cqs->Q,$cqs->N));
      my $d1Gens = new Matrix<Rational>(sort_matrix_rows_by_first_coordinate($d1->MODULE_GENERATORS));
      my $annVertex = -$d1Gens->[$d1Gens->rows-1] + ($d1Gens->[$d1Gens->rows-1]->[0] - $d1Gens->[0]->[0])*$rho1;
      $annVertex = $annVertex - $rho1 - (new Vector<Rational>(0,new Rational(1,$cqs->N)));
      # print "Ann: ",$annVertex,"\n";
      my $d2Vertex = $d2->SECTION_POLYTOPE->VERTICES->[0]->slice(1);
      $annVertex += $d2Vertex;
      my $ann = new Polytope(POINTS=>[[1,@$annVertex],[0,0,-1],[0,-$cqs->N,-$cqs->Q]]);
      # print $d1Gens,"\n",$d2Vertex,"\n";
      my @result = ();
      for(my $i=1; $i<$d1Gens->rows; $i++){
         my $intersectionVertex = $d1Gens->[$i-1] + ($d1Gens->[$i]->[0] - $d1Gens->[$i-1]->[0])*$rho1;
         # print "int: ",$intersectionVertex,"\n";
         $intersectionVertex *= (-1);
         $intersectionVertex += $d2Vertex;
         my $intersector = new Polytope(POINTS=>[[1,@$intersectionVertex],[0,0,1],[0,$cqs->N,$cqs->Q]]);
         my $intersection = intersection($ann, $intersector);
         # print "LP:\n",$intersection->LATTICE_POINTS,"\n";
         @result = (@result, @{$intersection->LATTICE_POINTS->minor(All,~[0])});
      }
      return new Matrix(uniq(@result));
   }

   user_method multiply(ExtMonomial, ExtMonomial){
      my($cqs, $b, $a) = @_;
      my $weightedEdges = $cqs->RESOLUTION->WEIGHTED_EDGES;
      my $facets = new Matrix<Rational>(primitive($cqs->RAYS));
      my $resultPath = $a->PATH;
      # print "Path is:\n",$resultPath,"\n";
      my $last = $resultPath->[$resultPath->rows - 1];
      for(my $i = 0; $i<$b->PATH->rows; $i++){
         my $bi = vertex_from_ineq($b->PATH->[$i], $facets);
         $bi = $bi - $a->DEGREE;
         $bi = ineq_from_vertex($bi, $facets);
         # print "bi: ",$bi,"\n";
         my @S = find_incoming_arrows($last, $weightedEdges, $facets);
         # print "S:\n",join("\n",@S),"\n\n";
         @S = grep(($_->[0] <= $bi->[0]) && ($_->[1] <= $bi->[1]),@S);
         # print "S:\n",join("\n",@S),"\n\n";
         if(@S == 1){
            $last = pop @S;
            $resultPath = $resultPath/$last;
         } else {
            return 0;
         }
      }
      my $d1 = $cqs->add('DIVISOR',COEFFICIENTS=>$last);
      my $d2 = $cqs->add('DIVISOR',COEFFICIENTS=>$b->SOURCE);
      my $possibleDegrees = $cqs->ext1($d1, $d2);
      # print "Possible Degrees:\n",$possibleDegrees,"\n";
      my $resultDegree = $a->DEGREE + $b->DEGREE;
      if(grep($_ == $resultDegree, @$possibleDegrees) == 1){
         return new ExtMonomial(DEGREE=>$resultDegree, PATH=>$resultPath, SOURCE=>$b->SOURCE);
      } else {
         return 0;
      }
   }
   
   user_method print_monomial_nicely(ExtMonomial){
      my($cqs, $monomial) = @_;
      if($monomial == 0){
         print "0\n";
         return;
      }
      my $facets = new Matrix<Rational>(primitive($cqs->RAYS));
      my $n = $cqs->N;
      print "([",join(",",@{$monomial->DEGREE}),"], ";
      for(my $i=$monomial->PATH->rows-1; $i>=0; $i--){
         my $current = $monomial->PATH->[$i];
         my($ei, $shift) = find_lineq_ei($current, $facets, $n);
         my $index = -$ei->[0];
         print "E",$index,"[",join(",",@$shift),"]";
         if($i>0){
            print "->";
         }
      }
      print ", ";
      my($sourceEi, $sourceShift) = find_lineq_ei($monomial->SOURCE, $facets, $n);
      print "E",-$sourceEi->[0],"[",join(",",@$sourceShift),"])\n";
   }

}



user_function ext1_mat_from_dcf(Vector<Integer>){
   my($dcf) = @_;
   $dcf = new Vector<Integer>($dcf);
   my $length = $dcf->dim;
   if(($length == 0) || ($dcf == ones_vector<Integer>(1))){
      return zero_matrix(1,1);
   }
   if($dcf->[$length-1] == 1){
      $dcf = $dcf->slice(0, $length-1);
      $dcf->[$dcf->dim - 1]--;
      return ext1_mat_from_dcf(new Vector<Integer>($dcf));
   }
   $dcf->[$length-1]--;
   my @dcf = @$dcf;
   my $upper_left_dcf = 0;
   if($length>1){
      $upper_left_dcf = new Vector<Integer>($dcf->slice(0,$length-1));
   } else {
      $upper_left_dcf = zero_vector<Integer>(0);
   }
   my $lower_right_dcf = new Vector<Integer>(\@dcf);
   my $upper_left = ext1_mat_from_dcf($upper_left_dcf);
   my $lower_right = ext1_mat_from_dcf($lower_right_dcf);
   my $A;
   if($upper_left->rows > $lower_right->rows){
      my $start = $upper_left->rows - $lower_right->rows;
      $A = $upper_left->minor(All, [$start..($upper_left->rows-1)]);
   } else {
      my $start = $lower_right->rows - $upper_left->rows;
      $A = $lower_right->minor([$start..($lower_right->rows-1)], All);
   }
   my $result = ($upper_left | $A) / (transpose($A) | $lower_right);
   $result = $result + upper_triangular_ones_matrix($result->rows);
   return new Matrix($result);
}

sub vertex_from_ineq{
   my($val, $facets) = @_;
   my $p = new Polytope(INEQUALITIES=>($val | $facets));
   return $p->VERTICES->[0]->slice(1);
}

sub ineq_from_vertex{
   my($vertex, $facets) = @_;
   return -$facets * $vertex;
}

sub are_linearly_equivalent{
   my($div1, $div2, $facets) = @_;
   my $v1 = vertex_from_ineq($div1, $facets);
   my $v2 = vertex_from_ineq($div2, $facets);
   return is_integral($v1-$v2);
}

sub find_lineq_ei{
   my($div, $facets, $n) = @_;
   for(my $i=0; $i<$n; $i++){
      my $candidate = new Vector(-$i, 0);
      if(are_linearly_equivalent($div, $candidate, $facets)){
         my $shift = vertex_from_ineq($div, $facets) - vertex_from_ineq($candidate, $facets);
         return($candidate, $shift);
      }
   }
   die "No fitting candidate.";
}

sub find_incoming_arrows{
   my($div, $weightedEdges, $facets) = @_;
   my @selected = grep($_->[1] == $div, keys %$weightedEdges);
   # print "Selection done.\n";
   my @result = map{
      my $sourceVertex = vertex_from_ineq($_->[0], $facets);
      # print "Have source vertex.\n";
      my $degrees = $weightedEdges->{$_};
      map($_+$sourceVertex, @$degrees);
   }@selected;
   return map(ineq_from_vertex($_, $facets), @result);
}

sub upper_triangular_ones_matrix{
   my($n) = @_;
   return new Matrix(map(ones_vector($n-$_) | zero_vector($_), 1..$n));
}


sub sort_matrix_rows_by_first_coordinate{
   my($matrix) = @_;
   if($matrix->rows == 1){
      return $matrix;
   }
   my @rows = @$matrix;
   my @sorted_rows = sort{$a->[0] <=> $b->[0]} @rows;
   return new Matrix(@sorted_rows);
}





