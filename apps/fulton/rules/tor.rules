user_function tor( $ , Cone, Cone, Cone, Matrix, Matrix){
   my($i, $s, $s1, $s2, $lower_map, $right_map) = @_;
   if($s->DIM < $s->AMBIENT_DIM){
      print "s has not full dimension. Projecting.\n";
      my($transform, $projection) = find_nice_projection($s);
      $lower_map = $lower_map * $projection;
      $right_map = $right_map * $projection;
      $s = new Cone(INPUT_RAYS=>$s->RAYS * $projection);
   }
   if($s1->DIM < $s1->AMBIENT_DIM){
      print "s1 has not full dimension. Projecting.\n";
      my($transform, $projection) = find_nice_projection($s1);
      $lower_map = inv($transform) * $lower_map;
      $lower_map = $lower_map->minor([0..($s1->DIM-1)], All);
      $s1 = new Cone(INPUT_RAYS=>$s1->RAYS * $projection);
   }
   if($s2->DIM < $s2->AMBIENT_DIM){
      print "s2 has not full dimension. Projecting.\n";
      my($transform, $projection) = find_nice_projection($s2);
      $right_map = inv($transform) * $right_map;
      $right_map = $right_map->minor([0..($s2->DIM-1)], All);
      $s2 = new Cone(INPUT_RAYS=>$s2->RAYS * $projection);
   }

   my $sv = new Cone(INPUT_RAYS=>$s->FACETS);
   my $s1v = new Cone(INPUT_RAYS=>$s1->FACETS);
   my $s2v = new Cone(INPUT_RAYS=>$s2->FACETS);
   
   my($hilb_sv, $sv_variables, $sv_toric_ideal) = prepare_algebra_strings($sv, "x");
   my($hilb_s1v, $s1v_variables, $s1v_toric_ideal) = prepare_algebra_strings($s1v, "y");
   my($hilb_s2v, $s2v_variables, $s2v_toric_ideal) = prepare_algebra_strings($s2v, "z");

   my @right_map_images = get_ring_map_images($sv, $s2v, $right_map);
   @right_map_images = map(translate_to_monomial($_,"z"),@right_map_images);
   my @lower_map_images = get_ring_map_images($sv, $s1v, $lower_map);
   @lower_map_images = map(translate_to_monomial($_,"y"),@lower_map_images);
   
   my $singular_string = "";
   
   # Create ring for lower right corner. We probably don't need this one.
   if($sv->TORIC_IDEAL->rows > 0){
      $singular_string .= "ring R_sv = 0,(".$sv_variables."),dp;\n";
      $singular_string .= "ideal ti_sv = ".$sv_toric_ideal.";\n";
      $singular_string .= "qring r_sv = std(ti_sv);\n";
   } else {
      $singular_string .= "ring R_sv = 0,(".$sv_variables."),dp;\n";
      $singular_string .= "ring r_sv = 0,(".$sv_variables."),dp;\n";
   }

   # Create ring for upper right corner.
   if($s2v->TORIC_IDEAL->rows > 0){
      $singular_string .= "ring R_s2v = 0,(".$s2v_variables."),dp;\n";
      $singular_string .= "ideal ti_s2v = ".$s2v_toric_ideal.";\n";
      $singular_string .= "qring r_s2v = std(ti_s2v);\n";
   } else {
      $singular_string .= "ring R_s2v = 0,(".$s2v_variables."),dp;\n";
      $singular_string .= "ring r_s2v = 0,(".$s2v_variables."),dp;\n";
   }

   # Create tensor product ring mapping surjectively onto upper right corner ring.
   if($sv->TORIC_IDEAL->rows > 0){
      $singular_string .= "ring R_sv_tensor_R_s2v = 0,(".$sv_variables.",".$s2v_variables."),dp;\n";
      $singular_string .= "ideal ti_sv = ".$sv_toric_ideal.";\n";
      $singular_string .= "qring r_sv_tensor_R_s2v = std(ti_sv);\n";
   } else {
      $singular_string .= "ring R_sv_tensor_R_s2v = 0,(".$sv_variables.",".$s2v_variables."),dp;\n";
      $singular_string .= "ring r_sv_tensor_R_s2v = 0,(".$sv_variables.",".$s2v_variables."),dp;\n";
   }

   # Create map onto r_s2v.
   $singular_string .= "setring r_s2v;\n";
   $singular_string .= "map f = r_sv_tensor_R_s2v,".join(",",@right_map_images).",".$s2v_variables.";\n";
   $singular_string .= "setring r_sv_tensor_R_s2v;\n";

   # Compute the kernel and a free resolution of it.
   $singular_string .= "ideal sigma2 = kernel(r_s2v, f);\n";
   $singular_string .= "def L = res(sigma2,".($i+1).");\n";

   $singular_string .= "ring R_s1v_tensor_R_s2v = 0,(".$s1v_variables.",".$s2v_variables."),dp;\n";
   $singular_string .= "ideal ti_s1v = ".$s1v_toric_ideal.";\n";
   $singular_string .= "qring r_s1v_tensor_R_s2v = std(ti_s1v);\n";
   $singular_string .= "map g = r_sv_tensor_R_s2v,".join(",",@lower_map_images).",".$s2v_variables.";\n";

   print $singular_string;
   singular_eval($singular_string);

   $singular_string = "";

   # Now we want the i-th cohomology.
   load_singular_library("homolog.lib");
   $singular_string .= "setring r_sv_tensor_R_s2v;\n";
   $singular_string .= "def A = matrix(L[".($i)."]);\n";
   $singular_string .= "def B = matrix(L[".($i+1)."]);\n";
   $singular_string .= "setring r_s1v_tensor_R_s2v;\n";
   $singular_string .= "def gA = g(A);\n";
   $singular_string .= "def gB = g(B);\n";
   $singular_string .= "matrix M[nrows(gB)][nrows(gB)];\n";
   $singular_string .= "matrix N[nrows(gA)][nrows(gA)];\n";
   $singular_string .= "def H = homology(module(gB),module(gA),module(M),module(N));\n";
   $singular_string .= "H = std(H);\n";
   
   singular_eval($singular_string);

   singular_eval("int d = dim(H);");
   my $d = singular_get_var("d");

   print "Singular computed Tor_".$i." as a module over\n";
   print "  k[s1v]\\otimes k[num_hilb(s2v)].\n";
   print "It is stored in the Singular variable H and you can\n";
   print "call it via\n";
   print "  singular_eval(\"H;\");\n";
   print "The return value of this function is dim(H).\n\n";

   return $d;
}

sub prepare_algebra_strings{
   my($cone, $var_letter) = @_;
   my $hilbert_basis = $cone->HILBERT_BASIS;
   my @variables = map($var_letter."(".$_.")",1..$hilbert_basis->rows);
   my $variables_string = join(",",@variables);
   my $toric_ideal = toric_ideal_as_string($cone, @variables);
   return($hilbert_basis, $variables_string, $toric_ideal);
}

sub get_ring_map_images{
   my($source_cone, $target_cone, $map) = @_;
   my @images = @{$source_cone->HILBERT_BASIS};
   @images = map($map * $_, @images);
   @images = map(find_positive_combination($_, $target_cone->HILBERT_BASIS, $target_cone->FACETS), @images);
   return @images;
}

sub translate_to_monomial{
   my($exponent, $var_letter) = @_;
   my @variables = map($var_letter."(".$_.")",1..$exponent->dim);
   return vector_to_monomial_string($exponent, @variables);
}




