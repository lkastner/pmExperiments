#  Copyright (c) 2012
#  by authors as mentioned on:
#  https://github.com/lkastner/polymake_toric/wiki/Authors
#  
#  Project home:
#  https://github.com/lkastner/polymake_toric
#
#  For licensing we cite the original Polymake code:
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version: http://www.gnu.org/licenses/gpl.txt.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

object NormalToricVariety {

   user_method res(TDivisor){
      my $tv = $_[0];
      my $D = $_[1];
      print $D->COEFFICIENTS;
      my $c = new Cone(INPUT_RAYS=>$tv->RAYS);
      my $tvc = new Polytope(POINTS=>unit_vector($tv->AMBIENT_DIM+1,0)/(zero_vector($c->FACETS->rows)|$c->FACETS));
      print $tvc->VERTICES;
      my $Dgs = $D->SECTION_POLYTOPE;
      print "Vertices:\n", $Dgs->VERTICES;
      print "Inequalities:\n",$Dgs->INEQUALITIES;
      print "Product:\n",$Dgs->INEQUALITIES * transpose($Dgs->VERTICES);
      my $v = move_inside($tvc,$Dgs);
      my $Dp = lower_lattice_points($Dgs);
      $Dp = new Matrix(map($_+$v,@$Dp));
      $Dp = $Dp->minor(All,~[0]);
      print "New vertices:\n",$Dp,"\n";

      my $dual_cone = new Cone(INPUT_RAYS=>$c->FACETS);
      my $H = $dual_cone->HILBERT_BASIS_GENERATORS->[0];

      my $Dgen = new Matrix(map(find_positive_combination($_,$H,$c->RAYS),@$Dp));
      print "Check:\n",transpose($H)*transpose($Dgen);


      my $toric = $dual_cone->TORIC_IDEAL;
      # print "Toric ideal:\n",$toric;

      # Now all combinatorial information has been collected.
      # Generating input for Singular:
      print "LIB \"homolog.lib\";\n";
      print "LIB \"multigrading.lib\";\n";
      print "ring R = 0,(x(0..",$H->rows-1,")),dp;\n";
      print "intmat m[",$H->rows,"][",$H->cols,"] = ";
      print join(",",map(join(",",@$_),@$H)),";\n";
      print "m = transpose(m);\n";
      print "ideal toric = ";
      if($toric->rows == 0){
         print "0;\n";
      } else {
         foreach my $binomial (@$toric){
            print "1";
            for(my $i=0; $i<$binomial->dim;$i++){
               if($binomial->[$i]>0){
                  print "*x(",$i,")^",$binomial->[$i];
               }
            }
            print "-1";
            for(my $i=0; $i<$binomial->dim;$i++){
               if($binomial->[$i]<0){
                  print "*x(",$i,")^",-$binomial->[$i];
               }
            }
            print ",";
         }
         print "0;\n";
      }
      print "qring q = std(toric);\n";
      print "setBaseMultigrading(m);\n";
      print "ideal I = ";
      if($Dgen->rows == 1){
         print "1;\n";
      } else {
         foreach my $g (@$Dgen){
            print "1";
            for(my $i=0; $i<$g->dim;$i++){
               if($g->[$i]>0){
                  print "*x(",$i,")^",$g->[$i];
               }
            }
            print ",";
         }
         print "0;\n";
      }
      print "I=std(I);\nI;\n";
      print "def L = multiDegResolution(I,6,1);\n";
   }
   
   user_method ext(TDivisor, TDivisor){
      my $tv = $_[0];
      my $D1 = $_[1];
      my $D2 = $_[2];
      # print $D1->COEFFICIENTS," - ",$D2->COEFFICIENTS,"\n";
      my $c = new Cone(INPUT_RAYS=>$tv->RAYS);
      my $tvc = new Polytope(POINTS=>unit_vector($tv->AMBIENT_DIM+1,0)/(zero_vector($c->FACETS->rows)|$c->FACETS));
      # print $tvc->VERTICES;
      my $D1gs = $D1->SECTION_POLYTOPE;
      my $D2gs = $D2->SECTION_POLYTOPE;
      # print "Vertices:\n", $D1gs->VERTICES;
      # print "Inequalities:\n",$D1gs->INEQUALITIES;
      # print "Product:\n",$D1gs->INEQUALITIES * transpose($D1gs->VERTICES);
      my $v1 = move_inside($tvc,$D1gs);
      my $v2 = move_inside($tvc,$D2gs);

      my $D1p = lower_lattice_points($D1gs);
      $D1p = new Matrix(map($_+$v1,@$D1p));
      $D1p = $D1p->minor(All,~[0]);
      # print "New vertices:\n",$D1p,"\n";
      my $D2p = lower_lattice_points($D2gs);
      # print "v2:\n",$v2,"\nD2p:\n",$D2p;
      $D2p = new Matrix(map($_+$v2,@$D2p));
      $D2p = $D2p->minor(All,~[0]);
      # print "New vertices:\n",$D2p,"\n";

      my $dual_cone = new Cone(INPUT_RAYS=>$c->FACETS);
      my $H = $dual_cone->HILBERT_BASIS_GENERATORS->[0];

      my $D1gen = new Matrix(map(find_positive_combination($_,$H,$c->RAYS),@$D1p));
      my $D2gen = new Matrix(map(find_positive_combination($_,$H,$c->RAYS),@$D2p));
      # print "Check1:\n",transpose($H)*transpose($D1gen);
      # print "Check2:\n",transpose($H)*transpose($D2gen);


      my $toric = $dual_cone->TORIC_IDEAL;
      # print "Toric ideal:\n",$toric;

      # Now all combinatorial information has been collected.
      # Generating input for Singular:
      print "LIB \"homolog.lib\";\n";
      print "ring R = 0,(x(0..",$H->rows-1,")),dp;\n";
      print "ideal toric = ";
      if($toric->rows == 0){
         print "0;\n";
      } else {
         foreach my $binomial (@$toric){
            print "1";
            for(my $i=0; $i<$binomial->dim;$i++){
               if($binomial->[$i]>0){
                  print "*x(",$i,")^",$binomial->[$i];
               }
            }
            print "-1";
            for(my $i=0; $i<$binomial->dim;$i++){
               if($binomial->[$i]<0){
                  print "*x(",$i,")^",-$binomial->[$i];
               }
            }
            print ",";
         }
         print "0;\n";
      }
      print "qring q = std(toric);\n";
      print "ideal I = ";
      if($D1gen->rows == 1){
         print "1;\n";
      } else {
         foreach my $g (@$D1gen){
            print "1";
            for(my $i=0; $i<$g->dim;$i++){
               if($g->[$i]>0){
                  print "*x(",$i,")^",$g->[$i];
               }
            }
            print ",";
         }
         print "0;\n";
      }
      print "ideal J = ";
      if($D2gen->rows == 1){
         print "1;\n";
      } else {
         foreach my $g (@$D2gen){
            print "1";
            for(my $i=0; $i<$g->dim;$i++){
               if($g->[$i]>0){
                  print "*x(",$i,")^",$g->[$i];
               }
            }
            print ",";
         }
         print "0;\n";
      }
      print "I=std(I);\nJ=std(J);\n";
      print "module M = syz(I);\nmodule N = syz(J);\n";
      for(my $i=0; $i<=10;$i++){
         print "Ext($i,M,N);\n";
      }
   }


}


# Return a vector that moves q into p.
# Note that we assume equality of the tail cones but do not check it.
sub move_inside{
   my ($p, $q) = @_;
   my $result = new Vector(zero_vector($q->AMBIENT_DIM+1));
   my $tail = $p->TAILCONE;
   my $qvert = $q->VERTICES;
   foreach my $facet (@{$p->FACETS}){
      my $val = 0;
      foreach my $q (@{$qvert}){
         my $test = $facet*$q;
         $val = $test<$val ? $test : $val;
      }
      if($val<0){
         foreach my $ray (@{$tail->RAYS}){
            if($facet*$ray>0){
               my $mult = ceil(-$val/($facet*$ray));
               $result += $mult*$ray;
               $qvert = new Matrix(map($_+$mult*$ray,@$qvert));
               last;
            }
         }
      }
   }
   return $result;
}

############################################
## Computing Ext1 in the two-dimensional case
############################################
user_function ext_1(Cone, Vector, Vector){
   my($c,$d1,$d2)=@_;
   my $H = $c->HILBERT_BASIS_GENERATORS->[0];
   my $i = new Polytope(INEQUALITIES=>$d1|$c->FACETS);
   my $j = new Polytope(INEQUALITIES=>$d2|$c->FACETS);

   my $jvertex = $j->VERTICES->[0]->slice(1);
   print "Vertex of j:\n",$jvertex,"\n";
   print "Vertices of i:\n",$i->VERTICES,"\n";
   my $genj = lower_lattice_points($j);
   $genj = $genj->minor(All,~[0]);
   my $geni = lower_lattice_points($i);
   $geni = $geni->minor(All,~[0]);
   print "And these are the generators:\n",$geni,"\n";
   my @sorted = ();
   for(my $i =0; $i<200; $i++){
      foreach my $g (@$geni){
         if($g->[0]==$i){
            push @sorted,$g;
         }
      }
   }
   $geni = new Matrix<Rational>(@sorted);
   print "Sorted:\n",$geni,"\n";

  

   my $lower_ann = new Polytope(POINTS=>(ones_vector(1)|$jvertex-$geni->[0])/(zero_vector(2)|$c->RAYS));
   my $upper_ann = new Polytope(POINTS=>(ones_vector(1)|$jvertex-$geni->[$geni->rows-1])/(zero_vector(2)|$c->RAYS));
   print "Annihilating polytopes created.\n";
   my $ann = intersection($lower_ann,$upper_ann);
   my $nann_vertex = $ann->VERTICES->[0]->slice(1);
   # Complement of the annihilating polytopes:
   my $nann = new Polytope(POINTS=>(ones_vector(1)|$nann_vertex)/(zero_vector(2)|-$c->RAYS));

   # Creating the intersection polytopes:
   my @ips = map((new Polytope(POINTS=>(ones_vector(1)|$_)/(zero_vector(2)|$c->RAYS))),@$geni);
   my $n = @ips;
   @ips = map(intersection($ips[$_],$ips[$_+1]),0..($n-2));
   @ips = map(-($_->VERTICES->[0]->slice(1)),@ips);
   @ips = map((new Polytope(POINTS=>(ones_vector(1)|$_+$jvertex)/(zero_vector(2)|$c->RAYS))),@ips);
   @ips = map(intersection($nann,$_),@ips);
   print "Intersections done.\n";
   my @unique = ();
   foreach my $pp (@ips){
      # print "Vertices of intersection:\n",$pp->VERTICES,"\n";
      my $mat = $pp->LATTICE_POINTS;
      # print "LP:\n",$mat,"\n";
      foreach my $v (@$mat){
         my $id = grep($_ == $v, @unique);
         if($id == 0){
            push @unique, $v;
         }
      }
   }
  
   # Eliminating relations that are on the boundary of the annihilator:
   my @below = ();
   foreach my $g (@unique){
      my $a = polytope_contains_point($lower_ann,new Vector<Rational>($g));
      my $b = polytope_contains_point($upper_ann,new Vector<Rational>($g));
      if (!$a && !$b){
         push @below,$g;
      }
   }
   my $u = new Matrix(@below);
   # Translating generators for Singular:
   print "Elements: ",$u->rows,"\n";

   # Generating Singular code:
   print "LIB \"homolog.lib\";\n";
   print "LIB \"toric.lib\";\n";
   print "ring R = 0,(x(0..",$H->rows-1,")),dp;\n";
   print "intmat m[",$H->rows,"][",$H->cols,"] = ";
   print join(",",map(join(",",@$_),@$H)),";\n";
   print "m = transpose(m);\n";
   print "ideal ti = toric_ideal(m,\"pt\");\n";
   print "qring q = std(ti);\n";
   print "ideal i = ";
   if($geni->rows == 1){
         print "1;\n";
      } else {
         foreach my $v (@$geni){
            print "1";
            my $g = find_positive_combination($v,$H,$c->FACETS);
            for(my $i=0; $i<$g->dim;$i++){
               if($g->[$i]>0){
                  print "*x(",$i,")^",$g->[$i];
               }
            }
            print ",";
         }
         print "0;\n";
      }
   print "i = std(i);\n";
   print "ideal j = ";
   if($genj->rows == 1){
         print "1;\n";
      } else {
         foreach my $v (@$genj){
            print "1";
            my $g = find_positive_combination($v,$H,$c->FACETS);
            for(my $i=0; $i<$g->dim;$i++){
               if($g->[$i]>0){
                  print "*x(",$i,")^",$g->[$i];
               }
            }
            print ",";
         }
         print "0;\n";
      }
   print "j = std(j);\n";
   print "Ext(1,syz(i),syz(j));\n";
}





###########################################################
## Computing the Ext-graph
###########################################################
user_function ext_graph(Integer,Integer){
   my($n,$q) = @_;
   print "N: ",$n,", Q: ",$q,".\n";
   my $c = new Cone(INPUT_RAYS=>[[0,1],[$n,$q]]);

   my $P = new Polytope(POINTS=>[[1,0,0],[1,$q-$n,-1],[1,-$n,0],[1,$q-2*$n,-1]]);
   my $class_group = $P->LATTICE_POINTS;
   $class_group = $class_group->minor(All,~[0]);
   $class_group = new Matrix<Rational>($class_group);
   my @class_group = grep($_->[1] != -1,@$class_group);
   my @class_group = grep(($_->[0] + ($q-$n)*$_->[1]) != -$n, @class_group);
   $class_group = new Matrix<Rational>(@class_group);

   my $vertex_hash = new Map<Vector,Vector>();
   foreach my $div (@$class_group){
      my $D = new Polytope(INEQUALITIES=>$div|$c->FACETS);
      my $vertex = $D->VERTICES->[0]->slice(1);
      $vertex_hash->{$div} = $vertex;
   #   print $div," has value:",$vertex_hash->{$div},"\n";
   }
   print "Vertex hash generated.\n";
   # Todo: select elements.
   
   foreach my $v (@$class_group){
      my $D = new Polytope(INEQUALITIES=>$v|$c->FACETS);
      my @associated = ();
      my $genD = lower_lattice_points($D);
      $genD = $genD->minor(All,~[0]);
      
      my @sorted = ();
      for(my $i =0; $i<200; $i++){
         foreach my $g (@$genD){
            if($g->[0]==$i){
               push @sorted,$g;
            }
         }
      }
      $genD = new Matrix<Rational>(@sorted);
      print "Found generators.\n";

      # Calculating intersection polytopes:
      my @ips = map((new Polytope(POINTS=>(ones_vector(1)|$_)/(zero_vector(2)|$c->RAYS))),@$genD);
      my $n = @ips;
      @ips = map(intersection($ips[$_],$ips[$_+1]),0..($n-2));
      @ips = map(($_->VERTICES->[0]->slice(1)),@ips);
      # print @ips,"\n";
      print "Intersections done.\n";
      if(@ips == 0){
         print $v," was trivial.\n";
         next;
      }
      foreach my $t (@ips){
         foreach my $div (@$class_group){
            if(is_integral($t-$vertex_hash->{$div})){
               push @associated, new Vector($div);
               last;
            }
         }
      }
      print "The divisor\n",$v,"\nis associated with:\n";
      print new Matrix(@associated);
      print "\n";
      

   }
}
