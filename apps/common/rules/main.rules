
user_function toPolynomial($ , $ ){
   my($R, $s) = @_;
   # Initial check for bracket consistency:
   $s =~ s/\s//g;
   # index($s, "@") == -1 or die "Forbidden character \"@\" used!";
   my @vars = $R->variables;
   my $stilda = $s;

   foreach my $var (@vars){
      my $varstring = $var."";
      my $replacement = "m".("a" x (length($varstring)-1));
      $varstring = quotemeta($varstring);
      # print "Var: ",$varstring,"\nReplacement: ",$replacement,"\n";
      # print "Before: ",$stilda,"\n";
      $stilda =~ s/$varstring/$replacement/g;
      # print "After: ",$stilda,"\n";
   }
   $stilda =~ m/^[0123456789\/\*\^\-\+a\(\)m]*$/ or die "Input error: ".$stilda.".";
   # print "Extract ",extract_bracketed( $stilda ),"\n";
   # print "S:  ",$s,"\nST: ",$stilda,"\n";
   my $result = classify($s,$stilda,$R->variables);
   # print "Result: ",$result,"\n";
   return $result;
}

sub classify{
   my($s,$stilda,@vars) = @_;
   # print "\input\nS:  ",$s,"\nST: ",$stilda,"\n";
   my $monomial = qr/[^\+\-\(\)]+/x;
   my $brackets = qr/ \( (?: [^\(\)]* | (??{$brackets}) )* \) /x;
   my($op) = $stilda =~ m/^([\+\-]?)/x;
   # print "Operator: ",$op,"\n";
   $s = substr($s,length($op),length($s));
   $stilda = substr($stilda,length($op),length($stilda));
   # print "1st reduce\nS:  ",$s,"\nST: ",$stilda,"\n";
   my @term = ();
   my @termtilda = ();
   my $hasbrackets = 0;
   # Match the first summand. While matching unwrap the product structure.
   while(($stilda !~ m/^[+-]/) && (length($stilda) > 0)){
      # print "Loop started.\n";
      my $monomial = qr/[^\+\-\(\)]+/x;
      my $brackets = qr/ \( (?: [^\(\)]* | (??{$brackets}) )* \) /x;
      if(my($factor) = $stilda =~ m/^((??{$brackets}) \^?\d* ) /x){
         $hasbrackets = 1;
         push @termtilda, $factor;
         push @term, substr($s,0,length($factor));
         $stilda = substr($stilda,length($factor),length($stilda));
         $s = substr($s,length($factor),length($s));
         # print "1st if\nS:  ",$s,"\nST: ",$stilda,"\n";
      } elsif (my($factor) = $stilda =~ m/^([^\+\-\(\)]*)/x){
         push @termtilda, $factor;
         push @term, substr($s,0,length($factor));
         $stilda = substr($stilda,length($factor),length($stilda));
         $s = substr($s,length($factor),length($s));
      }
      # print "Loop\nS:  ",$s,"\nST: ",$stilda,"\n";
   }
   # print join("\n",@term),"\n\n";
   my $result = 1;
   if($hasbrackets){
      foreach my $factor (@termtilda){
         my $f = shift @term;
         # print $factor," ",$f,"\n";
         if(my($inner,$pow) = $factor =~ m/^\((.*)\)\^?(\d*)$/){
            if($pow) {
               while($pow>0){
                  $result = $result * classify(substr($f,1,length($inner)),$inner,@vars);
                  $pow--;
               }
            } else {
               $result = $result * classify(substr($f,1,length($inner)),$inner,@vars);
            }
         } else {
            $factor =~ s/^\*?//;
            $factor =~ s/\*?$//;
            $f =~ s/^\*?//;
            $f =~ s/\*?$//;
            $result = $result * parseMonomial($f,$factor,@vars);
         }
      }
   } else {
      # We must have a monomial!
      $result = parseMonomial(pop @term, pop @termtilda,@vars);
   }
   # print "Term: ",$result,"\n\n";
   if($op eq "-"){
      # print "Inverting!";
      $result = (-1) * $result;
   }
   if(length($stilda) > 0){
      $result = classify($s,$stilda,@vars) + $result;
   }
   # print "Result: ",$result,"\n\n";

   return $result;
   
}



sub parseMonomial{
   my($s,$stilda,@vars) = @_;
   # Sanity check:
   # print "Parsing Monomial.\nS:  ",$s,"\nST: ",$stilda,"\n";
   ($s !~ m/^\*(.*)/) or die "Incorrect monomial form.";
   ($s !~ m/(.*)\*$/) or die "Incorrect monomial form.";
   if( $stilda !~ m/m/){
      if(index($stilda,"/")>-1){
         my($a,$b) = $stilda =~ m/^(\d*)\/(\d*)/;
         # print $a," ",$b,"\n";
         return new Rational($a,$b);
      } else {
         return $stilda;
      }
   }
   my %varMap = ();
   my $i = 0;
   foreach my $v (@vars){
      my $varstring = $v."";
      $varMap{$varstring} = $i;
      $i++;
   }
   my $nvars = @vars;
   my $exp = new Vector<Int>($nvars);
   my $totalcoef = 1;
   while(length($s)>0){
      my($coef,$star1,$varlength,$hat,$pow,$star2) = $stilda =~ m/^(\d*\/?\d*)(\*?)(ma*)(\^?)(\d*)(\*?)/;
      # print $coef,$star1,$varlength,$hat,$pow,$star2,"\n";
      my $varstring = substr($s,length($coef.$star1),length($varlength));
      # print "Varstring: ",$varstring," ",$varMap{$varstring},"\n";
      if($pow){
         $exp->[$varMap{$varstring}] += $pow;
      } else {
         $exp->[$varMap{$varstring}] ++;
      }
      my $totallength = length($coef.$star1.$varlength.$hat.$pow.$star2);
      $s = substr($s,$totallength,length($s));
      $stilda = substr($stilda,$totallength,length($stilda));
      # print "S: ",$s,"\n";
      if($coef){
         if(index($coef,"/")>-1){
            my($a,$b) = $coef =~ m/^(\d*)\/(\d*)/;
            # print $a," ",$b,"\n";
            $totalcoef *= new Rational($a,$b);
         } else {
            $totalcoef *= $coef;
         }
      }
   }
   my $result = 1;
   my $i = 0;
   foreach my $var (@vars){
      my $pow = $exp->[$i];
      while($pow>0){
         $result = $result * $var;
         $pow--;
      }
      $i++;
   }
   
   # print "Result: ",$result," ",$exp," ",%varMap,"\n";
   if($totalcoef != 1){
      return $totalcoef*$result;
   } else {
      return $result;
   }
}

user_function test_toPolynomial(){
   my $R = new Ring(qw(x y z));
   my ($x,$y,$z) = $R->variables;
   my $f_original = 3*($x-$y)*($x-$y)+7*$z;
   my $f1 = toPolynomial($R,"3(x-y)2+7z");
   my $f2 = toPolynomial($R,"3*(x-y)^2+7z");
   my $f3 = toPolynomial($R,"3* (x -y)^ 2+ 7  *z");
   my $f4 = toPolynomial($R,"3* (x1 -y)^ 2+ 7  *z");
   print $f_original == $f1,"\n";
   print $f_original == $f2,"\n";
   print $f_original == $f3,"\n";
   print $f_original == $f4,"\n";
   $R = new Ring(qw({{{ }}} {%}));
   ($x,$y,$z) = $R->variables;
   $f_original = 3*($z^7)*(5*$x-$y)*($x-3*$z)*(5*$x-$y)-($x-3*$z)*(5*$x-$y)*($x-3*$z)*(5*$x-$y)+7*$z;
   my $f1 = toPolynomial($R,"3{%}7(5{{{-}}})2({{{-3{%})-((5{{{-}}})({{{-3{%}))2+7{%}");
   print $f_original == $f1,"\n";
}
